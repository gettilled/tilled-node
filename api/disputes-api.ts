/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Dispute } from '../model';
// @ts-ignore
import { DisputeEvidenceCreateParams } from '../model';
// @ts-ignore
import { ListDisputes200Response } from '../model';
/**
 * DisputesApi - axios parameter creator
 * @export
 */
export const DisputesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates Dispute evidence. Dispute evidence can only be submitted prior to the `closing_at` date.
         * @summary Create Dispute Evidence
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {DisputeEvidenceCreateParams} DisputeEvidenceCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDisputeEvidence: async (tilled_account: string, id: string, DisputeEvidenceCreateParams: DisputeEvidenceCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createDisputeEvidence', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('createDisputeEvidence', 'id', id)
            // verify required parameter 'DisputeEvidenceCreateParams' is not null or undefined
            assertParamExists('createDisputeEvidence', 'DisputeEvidenceCreateParams', DisputeEvidenceCreateParams)
            const localVarPath = `/v1/disputes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(DisputeEvidenceCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing Dispute.
         * @summary Get a Dispute
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDispute: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getDispute', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDispute', 'id', id)
            const localVarPath = `/v1/disputes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Disputes. The Disputes are sorted with the most recently created appearing first.
         * @summary List all Disputes
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} [charge_id] Only returns disputes for the charge specified by this charge ID.
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {string} [created_at_gte] Minimum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {string} [created_at_lte] Maximum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {Array<'warning_needs_response' | 'warning_under_review' | 'warning_closed' | 'needs_response' | 'under_review' | 'closed' | 'won' | 'lost'>} [status] String indicating the status to filter the result by.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDisputes: async (tilled_account: string, charge_id?: string, include_connected_accounts?: boolean, created_at_gte?: string, created_at_lte?: string, status?: Array<'warning_needs_response' | 'warning_under_review' | 'warning_closed' | 'needs_response' | 'under_review' | 'closed' | 'won' | 'lost'>, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listDisputes', 'tilled_account', tilled_account)
            const localVarPath = `/v1/disputes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (charge_id !== undefined) {
                localVarQueryParameter['charge_id'] = charge_id;
            }

            if (include_connected_accounts !== undefined) {
                localVarQueryParameter['include_connected_accounts'] = include_connected_accounts;
            }

            if (created_at_gte !== undefined) {
                localVarQueryParameter['created_at_gte'] = (created_at_gte as any instanceof Date) ?
                    (created_at_gte as any).toISOString() :
                    created_at_gte;
            }

            if (created_at_lte !== undefined) {
                localVarQueryParameter['created_at_lte'] = (created_at_lte as any instanceof Date) ?
                    (created_at_lte as any).toISOString() :
                    created_at_lte;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DisputesApi - functional programming interface
 * @export
 */
export const DisputesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DisputesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates Dispute evidence. Dispute evidence can only be submitted prior to the `closing_at` date.
         * @summary Create Dispute Evidence
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {DisputeEvidenceCreateParams} DisputeEvidenceCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDisputeEvidence(tilled_account: string, id: string, DisputeEvidenceCreateParams: DisputeEvidenceCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dispute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDisputeEvidence(tilled_account, id, DisputeEvidenceCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing Dispute.
         * @summary Get a Dispute
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDispute(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Dispute>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDispute(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Disputes. The Disputes are sorted with the most recently created appearing first.
         * @summary List all Disputes
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} [charge_id] Only returns disputes for the charge specified by this charge ID.
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {string} [created_at_gte] Minimum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {string} [created_at_lte] Maximum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {Array<'warning_needs_response' | 'warning_under_review' | 'warning_closed' | 'needs_response' | 'under_review' | 'closed' | 'won' | 'lost'>} [status] String indicating the status to filter the result by.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDisputes(tilled_account: string, charge_id?: string, include_connected_accounts?: boolean, created_at_gte?: string, created_at_lte?: string, status?: Array<'warning_needs_response' | 'warning_under_review' | 'warning_closed' | 'needs_response' | 'under_review' | 'closed' | 'won' | 'lost'>, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDisputes200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDisputes(tilled_account, charge_id, include_connected_accounts, created_at_gte, created_at_lte, status, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DisputesApi - factory interface
 * @export
 */
export const DisputesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DisputesApiFp(configuration)
    return {
        /**
         * Creates Dispute evidence. Dispute evidence can only be submitted prior to the `closing_at` date.
         * @summary Create Dispute Evidence
         * @param {DisputesApiCreateDisputeEvidenceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDisputeEvidence(requestParameters: DisputesApiCreateDisputeEvidenceRequest, options?: AxiosRequestConfig): AxiosPromise<Dispute> {
            return localVarFp.createDisputeEvidence(requestParameters.tilled_account, requestParameters.id, requestParameters.DisputeEvidenceCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing Dispute.
         * @summary Get a Dispute
         * @param {DisputesApiGetDisputeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDispute(requestParameters: DisputesApiGetDisputeRequest, options?: AxiosRequestConfig): AxiosPromise<Dispute> {
            return localVarFp.getDispute(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Disputes. The Disputes are sorted with the most recently created appearing first.
         * @summary List all Disputes
         * @param {DisputesApiListDisputesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDisputes(requestParameters: DisputesApiListDisputesRequest, options?: AxiosRequestConfig): AxiosPromise<ListDisputes200Response> {
            return localVarFp.listDisputes(requestParameters.tilled_account, requestParameters.charge_id, requestParameters.include_connected_accounts, requestParameters.created_at_gte, requestParameters.created_at_lte, requestParameters.status, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDisputeEvidence operation in DisputesApi.
 * @export
 * @interface DisputesApiCreateDisputeEvidenceRequest
 */
export interface DisputesApiCreateDisputeEvidenceRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof DisputesApiCreateDisputeEvidence
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof DisputesApiCreateDisputeEvidence
     */
    readonly id: string

    /**
     * 
     * @type {DisputeEvidenceCreateParams}
     * @memberof DisputesApiCreateDisputeEvidence
     */
    readonly DisputeEvidenceCreateParams: DisputeEvidenceCreateParams
}

/**
 * Request parameters for getDispute operation in DisputesApi.
 * @export
 * @interface DisputesApiGetDisputeRequest
 */
export interface DisputesApiGetDisputeRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof DisputesApiGetDispute
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof DisputesApiGetDispute
     */
    readonly id: string
}

/**
 * Request parameters for listDisputes operation in DisputesApi.
 * @export
 * @interface DisputesApiListDisputesRequest
 */
export interface DisputesApiListDisputesRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof DisputesApiListDisputes
     */
    readonly tilled_account: string

    /**
     * Only returns disputes for the charge specified by this charge ID.
     * @type {string}
     * @memberof DisputesApiListDisputes
     */
    readonly charge_id?: string

    /**
     * Whether or not to include the results from any connected accounts.
     * @type {boolean}
     * @memberof DisputesApiListDisputes
     */
    readonly include_connected_accounts?: boolean

    /**
     * Minimum &#x60;created_at&#x60; value to filter by (inclusive).
     * @type {string}
     * @memberof DisputesApiListDisputes
     */
    readonly created_at_gte?: string

    /**
     * Maximum &#x60;created_at&#x60; value to filter by (inclusive).
     * @type {string}
     * @memberof DisputesApiListDisputes
     */
    readonly created_at_lte?: string

    /**
     * String indicating the status to filter the result by.
     * @type {Array<'warning_needs_response' | 'warning_under_review' | 'warning_closed' | 'needs_response' | 'under_review' | 'closed' | 'won' | 'lost'>}
     * @memberof DisputesApiListDisputes
     */
    readonly status?: Array<'warning_needs_response' | 'warning_under_review' | 'warning_closed' | 'needs_response' | 'under_review' | 'closed' | 'won' | 'lost'>

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof DisputesApiListDisputes
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof DisputesApiListDisputes
     */
    readonly limit?: number
}

/**
 * DisputesApi - object-oriented interface
 * @export
 * @class DisputesApi
 * @extends {BaseAPI}
 */
export class DisputesApi extends BaseAPI {
    /**
     * Creates Dispute evidence. Dispute evidence can only be submitted prior to the `closing_at` date.
     * @summary Create Dispute Evidence
     * @param {DisputesApiCreateDisputeEvidenceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    public createDisputeEvidence(requestParameters: DisputesApiCreateDisputeEvidenceRequest, options?: AxiosRequestConfig) {
        return DisputesApiFp(this.configuration).createDisputeEvidence(requestParameters.tilled_account, requestParameters.id, requestParameters.DisputeEvidenceCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing Dispute.
     * @summary Get a Dispute
     * @param {DisputesApiGetDisputeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    public getDispute(requestParameters: DisputesApiGetDisputeRequest, options?: AxiosRequestConfig) {
        return DisputesApiFp(this.configuration).getDispute(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Disputes. The Disputes are sorted with the most recently created appearing first.
     * @summary List all Disputes
     * @param {DisputesApiListDisputesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisputesApi
     */
    public listDisputes(requestParameters: DisputesApiListDisputesRequest, options?: AxiosRequestConfig) {
        return DisputesApiFp(this.configuration).listDisputes(requestParameters.tilled_account, requestParameters.charge_id, requestParameters.include_connected_accounts, requestParameters.created_at_gte, requestParameters.created_at_lte, requestParameters.status, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
