/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { MerchantApplication } from '../model';
// @ts-ignore
import { MerchantApplicationCreateParams } from '../model';
/**
 * OnboardingApi - axios parameter creator
 * @export
 */
export const OnboardingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the details of an existing merchant application. The application can only be accessed if its status is `created` or `started`. Once the application is `submitted` or `active`, it is no longer accessible.
         * @summary Get a Merchant Application
         * @param {string} account_id The id of the associated connected (i.e. merchant) account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantApplication: async (account_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'account_id' is not null or undefined
            assertParamExists('getMerchantApplication', 'account_id', account_id)
            const localVarPath = `/v1/applications/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(account_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits a merchant application for processing. If there are any validation errors, they must be corrected before re-submitting. Once successfully submitted, the application is no longer accessible.
         * @summary Submit a Merchant Application
         * @param {string} account_id The id of the associated connected (i.e. merchant) account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitMerchantApplication: async (account_id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'account_id' is not null or undefined
            assertParamExists('submitMerchantApplication', 'account_id', account_id)
            const localVarPath = `/v1/applications/{account_id}/submit`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(account_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a merchant application by overwriting all properties.
         * @summary Update a Merchant Application
         * @param {string} account_id The id of the associated connected (i.e. merchant) account.
         * @param {MerchantApplicationCreateParams} MerchantApplicationCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMerchantApplication: async (account_id: string, MerchantApplicationCreateParams: MerchantApplicationCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'account_id' is not null or undefined
            assertParamExists('updateMerchantApplication', 'account_id', account_id)
            // verify required parameter 'MerchantApplicationCreateParams' is not null or undefined
            assertParamExists('updateMerchantApplication', 'MerchantApplicationCreateParams', MerchantApplicationCreateParams)
            const localVarPath = `/v1/applications/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(account_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(MerchantApplicationCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OnboardingApi - functional programming interface
 * @export
 */
export const OnboardingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OnboardingApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the details of an existing merchant application. The application can only be accessed if its status is `created` or `started`. Once the application is `submitted` or `active`, it is no longer accessible.
         * @summary Get a Merchant Application
         * @param {string} account_id The id of the associated connected (i.e. merchant) account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMerchantApplication(account_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMerchantApplication(account_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits a merchant application for processing. If there are any validation errors, they must be corrected before re-submitting. Once successfully submitted, the application is no longer accessible.
         * @summary Submit a Merchant Application
         * @param {string} account_id The id of the associated connected (i.e. merchant) account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitMerchantApplication(account_id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitMerchantApplication(account_id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a merchant application by overwriting all properties.
         * @summary Update a Merchant Application
         * @param {string} account_id The id of the associated connected (i.e. merchant) account.
         * @param {MerchantApplicationCreateParams} MerchantApplicationCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMerchantApplication(account_id: string, MerchantApplicationCreateParams: MerchantApplicationCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MerchantApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMerchantApplication(account_id, MerchantApplicationCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OnboardingApi - factory interface
 * @export
 */
export const OnboardingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OnboardingApiFp(configuration)
    return {
        /**
         * Retrieves the details of an existing merchant application. The application can only be accessed if its status is `created` or `started`. Once the application is `submitted` or `active`, it is no longer accessible.
         * @summary Get a Merchant Application
         * @param {OnboardingApiGetMerchantApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMerchantApplication(requestParameters: OnboardingApiGetMerchantApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantApplication> {
            return localVarFp.getMerchantApplication(requestParameters.account_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits a merchant application for processing. If there are any validation errors, they must be corrected before re-submitting. Once successfully submitted, the application is no longer accessible.
         * @summary Submit a Merchant Application
         * @param {OnboardingApiSubmitMerchantApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitMerchantApplication(requestParameters: OnboardingApiSubmitMerchantApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.submitMerchantApplication(requestParameters.account_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a merchant application by overwriting all properties.
         * @summary Update a Merchant Application
         * @param {OnboardingApiUpdateMerchantApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMerchantApplication(requestParameters: OnboardingApiUpdateMerchantApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<MerchantApplication> {
            return localVarFp.updateMerchantApplication(requestParameters.account_id, requestParameters.MerchantApplicationCreateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMerchantApplication operation in OnboardingApi.
 * @export
 * @interface OnboardingApiGetMerchantApplicationRequest
 */
export interface OnboardingApiGetMerchantApplicationRequest {
    /**
     * The id of the associated connected (i.e. merchant) account.
     * @type {string}
     * @memberof OnboardingApiGetMerchantApplication
     */
    readonly account_id: string
}

/**
 * Request parameters for submitMerchantApplication operation in OnboardingApi.
 * @export
 * @interface OnboardingApiSubmitMerchantApplicationRequest
 */
export interface OnboardingApiSubmitMerchantApplicationRequest {
    /**
     * The id of the associated connected (i.e. merchant) account.
     * @type {string}
     * @memberof OnboardingApiSubmitMerchantApplication
     */
    readonly account_id: string
}

/**
 * Request parameters for updateMerchantApplication operation in OnboardingApi.
 * @export
 * @interface OnboardingApiUpdateMerchantApplicationRequest
 */
export interface OnboardingApiUpdateMerchantApplicationRequest {
    /**
     * The id of the associated connected (i.e. merchant) account.
     * @type {string}
     * @memberof OnboardingApiUpdateMerchantApplication
     */
    readonly account_id: string

    /**
     * 
     * @type {MerchantApplicationCreateParams}
     * @memberof OnboardingApiUpdateMerchantApplication
     */
    readonly MerchantApplicationCreateParams: MerchantApplicationCreateParams
}

/**
 * OnboardingApi - object-oriented interface
 * @export
 * @class OnboardingApi
 * @extends {BaseAPI}
 */
export class OnboardingApi extends BaseAPI {
    /**
     * Retrieves the details of an existing merchant application. The application can only be accessed if its status is `created` or `started`. Once the application is `submitted` or `active`, it is no longer accessible.
     * @summary Get a Merchant Application
     * @param {OnboardingApiGetMerchantApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public getMerchantApplication(requestParameters: OnboardingApiGetMerchantApplicationRequest, options?: AxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).getMerchantApplication(requestParameters.account_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits a merchant application for processing. If there are any validation errors, they must be corrected before re-submitting. Once successfully submitted, the application is no longer accessible.
     * @summary Submit a Merchant Application
     * @param {OnboardingApiSubmitMerchantApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public submitMerchantApplication(requestParameters: OnboardingApiSubmitMerchantApplicationRequest, options?: AxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).submitMerchantApplication(requestParameters.account_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a merchant application by overwriting all properties.
     * @summary Update a Merchant Application
     * @param {OnboardingApiUpdateMerchantApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OnboardingApi
     */
    public updateMerchantApplication(requestParameters: OnboardingApiUpdateMerchantApplicationRequest, options?: AxiosRequestConfig) {
        return OnboardingApiFp(this.configuration).updateMerchantApplication(requestParameters.account_id, requestParameters.MerchantApplicationCreateParams, options).then((request) => request(this.axios, this.basePath));
    }
}
