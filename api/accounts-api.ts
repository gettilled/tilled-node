/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Account } from '../model';
// @ts-ignore
import type { AccountCapabilityCreateParams } from '../model';
// @ts-ignore
import type { AccountCapabilityUpdateParams } from '../model';
// @ts-ignore
import type { AccountUpdateParams } from '../model';
// @ts-ignore
import type { CreateConnectedAccountRequest } from '../model';
// @ts-ignore
import type { ListConnectedAccounts200Response } from '../model';
/**
 * AccountsApi - axios parameter creator
 * @export
 */
export const AccountsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Add an Account Capability
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {AccountCapabilityCreateParams} AccountCapabilityCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountCapability: async (tilled_account: string, AccountCapabilityCreateParams: AccountCapabilityCreateParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('addAccountCapability', 'tilled_account', tilled_account)
            // verify required parameter 'AccountCapabilityCreateParams' is not null or undefined
            assertParamExists('addAccountCapability', 'AccountCapabilityCreateParams', AccountCapabilityCreateParams)
            const localVarPath = `/v1/accounts/capabilities`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AccountCapabilityCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a connected Account associated with your partner/parent Account.
         * @summary Create a Connected Account
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {CreateConnectedAccountRequest} CreateConnectedAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectedAccount: async (tilled_account: string, CreateConnectedAccountRequest: CreateConnectedAccountRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createConnectedAccount', 'tilled_account', tilled_account)
            // verify required parameter 'CreateConnectedAccountRequest' is not null or undefined
            assertParamExists('createConnectedAccount', 'CreateConnectedAccountRequest', CreateConnectedAccountRequest)
            const localVarPath = `/v1/accounts/connected`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CreateConnectedAccountRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Delete an Account Capability
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountCapability: async (tilled_account: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('deleteAccountCapability', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAccountCapability', 'id', id)
            const localVarPath = `/v1/accounts/capabilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a connected Account. This cannot be undone.
         * @summary Delete a Connected Account
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectedAccount: async (tilled_account: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('deleteConnectedAccount', 'tilled_account', tilled_account)
            const localVarPath = `/v1/accounts/connected`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing Account.
         * @summary Get an Account
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (tilled_account: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getAccount', 'tilled_account', tilled_account)
            const localVarPath = `/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of merchant Accounts. The Accounts are sorted with the most recently created appearing first. If the provided account type is merchant, the list is empty.
         * @summary List all Connected Accounts
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {Array<ListConnectedAccountsStatus>} [status] Only return Connected Accounts whose status is included in this array. Examples: &#x60;/v1/accounts/connected?status&#x3D;active,partially_active&#x60; and &#x60;/v1/accounts/connected?status&#x3D;account_review&#x60;.
         * @param {string} [q] The partial search of text fields. Supports searching by &#x60;account.name&#x60;, &#x60;account.business_profile.legal_name&#x60;, &#x60;account.id&#x60;, &#x60;account.email&#x60;, &#x60;user.name&#x60;, &#x60;user.email&#x60;
         * @param {Array<ListConnectedAccountsPartnerApplicationStatus>} [partner_application_status] Only return Connected Partner Accounts whose partner application status is included in this array. Examples: &#x60;/v1/accounts/connected?partner_application_status&#x3D;created,started&#x60; and &#x60;/v1/accounts/connected?partner_application_status&#x3D;submitted&#x60;.
         * @param {Array<ListConnectedAccountsProcessingCapabilities>} [processing_capabilities] Only return Connected Partner Accounts who have an active capability with the specified processing capabilities.  Examples: &#x60;/v1/accounts/connected?processing_capabilities&#x3D;card,debit&#x60; and &#x60;/v1/accounts/connected?processing_capabilities&#x3D;card&#x60;.
         * @param {string} [sort] The sort parameters, value:direction. Possible values: &#x60;name&#x60;, &#x60;created_at&#x60;. Possible directions:  &#x60;asc&#x60;, &#x60;desc&#x60;  For example &#x60;name:asc&#x60;.  Default: &#x60;created_at:desc&#x60;
         * @param {ListConnectedAccountsType} [type] Only return Connected Accounts where the type matches the specified value.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConnectedAccounts: async (tilled_account: string, metadata?: { [key: string]: string; }, status?: Array<ListConnectedAccountsStatus>, q?: string, partner_application_status?: Array<ListConnectedAccountsPartnerApplicationStatus>, processing_capabilities?: Array<ListConnectedAccountsProcessingCapabilities>, sort?: string, type?: ListConnectedAccountsType, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listConnectedAccounts', 'tilled_account', tilled_account)
            const localVarPath = `/v1/accounts/connected`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (metadata !== undefined) {
                for (const [key, value] of Object.entries(metadata)) {
                    localVarQueryParameter[key] = value;
                }
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (partner_application_status) {
                localVarQueryParameter['partner_application_status'] = partner_application_status;
            }

            if (processing_capabilities) {
                localVarQueryParameter['processing_capabilities'] = processing_capabilities;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an Account by setting the values of the provided parameters. Any parameters not provided remain unchanged.
         * @summary Update an Account
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {AccountUpdateParams} AccountUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount: async (tilled_account: string, AccountUpdateParams: AccountUpdateParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('updateAccount', 'tilled_account', tilled_account)
            // verify required parameter 'AccountUpdateParams' is not null or undefined
            assertParamExists('updateAccount', 'AccountUpdateParams', AccountUpdateParams)
            const localVarPath = `/v1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AccountUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Update an Account Capability
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {AccountCapabilityUpdateParams} AccountCapabilityUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountCapability: async (tilled_account: string, id: string, AccountCapabilityUpdateParams: AccountCapabilityUpdateParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('updateAccountCapability', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAccountCapability', 'id', id)
            // verify required parameter 'AccountCapabilityUpdateParams' is not null or undefined
            assertParamExists('updateAccountCapability', 'AccountCapabilityUpdateParams', AccountCapabilityUpdateParams)
            const localVarPath = `/v1/accounts/capabilities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AccountCapabilityUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountsApi - functional programming interface
 * @export
 */
export const AccountsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Add an Account Capability
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {AccountCapabilityCreateParams} AccountCapabilityCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAccountCapability(tilled_account: string, AccountCapabilityCreateParams: AccountCapabilityCreateParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAccountCapability(tilled_account, AccountCapabilityCreateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.addAccountCapability']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a connected Account associated with your partner/parent Account.
         * @summary Create a Connected Account
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {CreateConnectedAccountRequest} CreateConnectedAccountRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConnectedAccount(tilled_account: string, CreateConnectedAccountRequest: CreateConnectedAccountRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConnectedAccount(tilled_account, CreateConnectedAccountRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.createConnectedAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Delete an Account Capability
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAccountCapability(tilled_account: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAccountCapability(tilled_account, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.deleteAccountCapability']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a connected Account. This cannot be undone.
         * @summary Delete a Connected Account
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteConnectedAccount(tilled_account: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConnectedAccount(tilled_account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.deleteConnectedAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the details of an existing Account.
         * @summary Get an Account
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(tilled_account: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(tilled_account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.getAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of merchant Accounts. The Accounts are sorted with the most recently created appearing first. If the provided account type is merchant, the list is empty.
         * @summary List all Connected Accounts
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {Array<ListConnectedAccountsStatus>} [status] Only return Connected Accounts whose status is included in this array. Examples: &#x60;/v1/accounts/connected?status&#x3D;active,partially_active&#x60; and &#x60;/v1/accounts/connected?status&#x3D;account_review&#x60;.
         * @param {string} [q] The partial search of text fields. Supports searching by &#x60;account.name&#x60;, &#x60;account.business_profile.legal_name&#x60;, &#x60;account.id&#x60;, &#x60;account.email&#x60;, &#x60;user.name&#x60;, &#x60;user.email&#x60;
         * @param {Array<ListConnectedAccountsPartnerApplicationStatus>} [partner_application_status] Only return Connected Partner Accounts whose partner application status is included in this array. Examples: &#x60;/v1/accounts/connected?partner_application_status&#x3D;created,started&#x60; and &#x60;/v1/accounts/connected?partner_application_status&#x3D;submitted&#x60;.
         * @param {Array<ListConnectedAccountsProcessingCapabilities>} [processing_capabilities] Only return Connected Partner Accounts who have an active capability with the specified processing capabilities.  Examples: &#x60;/v1/accounts/connected?processing_capabilities&#x3D;card,debit&#x60; and &#x60;/v1/accounts/connected?processing_capabilities&#x3D;card&#x60;.
         * @param {string} [sort] The sort parameters, value:direction. Possible values: &#x60;name&#x60;, &#x60;created_at&#x60;. Possible directions:  &#x60;asc&#x60;, &#x60;desc&#x60;  For example &#x60;name:asc&#x60;.  Default: &#x60;created_at:desc&#x60;
         * @param {ListConnectedAccountsType} [type] Only return Connected Accounts where the type matches the specified value.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listConnectedAccounts(tilled_account: string, metadata?: { [key: string]: string; }, status?: Array<ListConnectedAccountsStatus>, q?: string, partner_application_status?: Array<ListConnectedAccountsPartnerApplicationStatus>, processing_capabilities?: Array<ListConnectedAccountsProcessingCapabilities>, sort?: string, type?: ListConnectedAccountsType, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListConnectedAccounts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listConnectedAccounts(tilled_account, metadata, status, q, partner_application_status, processing_capabilities, sort, type, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.listConnectedAccounts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an Account by setting the values of the provided parameters. Any parameters not provided remain unchanged.
         * @summary Update an Account
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {AccountUpdateParams} AccountUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccount(tilled_account: string, AccountUpdateParams: AccountUpdateParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccount(tilled_account, AccountUpdateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.updateAccount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Update an Account Capability
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {AccountCapabilityUpdateParams} AccountCapabilityUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAccountCapability(tilled_account: string, id: string, AccountCapabilityUpdateParams: AccountCapabilityUpdateParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAccountCapability(tilled_account, id, AccountCapabilityUpdateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountsApi.updateAccountCapability']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountsApi - factory interface
 * @export
 */
export const AccountsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountsApiFp(configuration)
    return {
        /**
         * Adds an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Add an Account Capability
         * @param {AccountsApiAddAccountCapabilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAccountCapability(requestParameters: AccountsApiAddAccountCapabilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addAccountCapability(requestParameters.tilled_account, requestParameters.AccountCapabilityCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a connected Account associated with your partner/parent Account.
         * @summary Create a Connected Account
         * @param {AccountsApiCreateConnectedAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConnectedAccount(requestParameters: AccountsApiCreateConnectedAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.createConnectedAccount(requestParameters.tilled_account, requestParameters.CreateConnectedAccountRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Delete an Account Capability
         * @param {AccountsApiDeleteAccountCapabilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAccountCapability(requestParameters: AccountsApiDeleteAccountCapabilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteAccountCapability(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a connected Account. This cannot be undone.
         * @summary Delete a Connected Account
         * @param {AccountsApiDeleteConnectedAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteConnectedAccount(requestParameters: AccountsApiDeleteConnectedAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteConnectedAccount(requestParameters.tilled_account, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing Account.
         * @summary Get an Account
         * @param {AccountsApiGetAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(requestParameters: AccountsApiGetAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.getAccount(requestParameters.tilled_account, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of merchant Accounts. The Accounts are sorted with the most recently created appearing first. If the provided account type is merchant, the list is empty.
         * @summary List all Connected Accounts
         * @param {AccountsApiListConnectedAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listConnectedAccounts(requestParameters: AccountsApiListConnectedAccountsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListConnectedAccounts200Response> {
            return localVarFp.listConnectedAccounts(requestParameters.tilled_account, requestParameters.metadata, requestParameters.status, requestParameters.q, requestParameters.partner_application_status, requestParameters.processing_capabilities, requestParameters.sort, requestParameters.type, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an Account by setting the values of the provided parameters. Any parameters not provided remain unchanged.
         * @summary Update an Account
         * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccount(requestParameters: AccountsApiUpdateAccountRequest, options?: RawAxiosRequestConfig): AxiosPromise<Account> {
            return localVarFp.updateAccount(requestParameters.tilled_account, requestParameters.AccountUpdateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
         * @summary Update an Account Capability
         * @param {AccountsApiUpdateAccountCapabilityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAccountCapability(requestParameters: AccountsApiUpdateAccountCapabilityRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateAccountCapability(requestParameters.tilled_account, requestParameters.id, requestParameters.AccountCapabilityUpdateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAccountCapability operation in AccountsApi.
 * @export
 * @interface AccountsApiAddAccountCapabilityRequest
 */
export interface AccountsApiAddAccountCapabilityRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof AccountsApiAddAccountCapability
     */
    readonly tilled_account: string

    /**
     * 
     * @type {AccountCapabilityCreateParams}
     * @memberof AccountsApiAddAccountCapability
     */
    readonly AccountCapabilityCreateParams: AccountCapabilityCreateParams
}

/**
 * Request parameters for createConnectedAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiCreateConnectedAccountRequest
 */
export interface AccountsApiCreateConnectedAccountRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof AccountsApiCreateConnectedAccount
     */
    readonly tilled_account: string

    /**
     * 
     * @type {CreateConnectedAccountRequest}
     * @memberof AccountsApiCreateConnectedAccount
     */
    readonly CreateConnectedAccountRequest: CreateConnectedAccountRequest
}

/**
 * Request parameters for deleteAccountCapability operation in AccountsApi.
 * @export
 * @interface AccountsApiDeleteAccountCapabilityRequest
 */
export interface AccountsApiDeleteAccountCapabilityRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof AccountsApiDeleteAccountCapability
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof AccountsApiDeleteAccountCapability
     */
    readonly id: string
}

/**
 * Request parameters for deleteConnectedAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiDeleteConnectedAccountRequest
 */
export interface AccountsApiDeleteConnectedAccountRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof AccountsApiDeleteConnectedAccount
     */
    readonly tilled_account: string
}

/**
 * Request parameters for getAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiGetAccountRequest
 */
export interface AccountsApiGetAccountRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof AccountsApiGetAccount
     */
    readonly tilled_account: string
}

/**
 * Request parameters for listConnectedAccounts operation in AccountsApi.
 * @export
 * @interface AccountsApiListConnectedAccountsRequest
 */
export interface AccountsApiListConnectedAccountsRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly tilled_account: string

    /**
     * &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
     * @type {{ [key: string]: string; }}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly metadata?: { [key: string]: string; }

    /**
     * Only return Connected Accounts whose status is included in this array. Examples: &#x60;/v1/accounts/connected?status&#x3D;active,partially_active&#x60; and &#x60;/v1/accounts/connected?status&#x3D;account_review&#x60;.
     * @type {Array<'active' | 'requires_pricing' | 'funding_hold' | 'account_review' | 'partially_active' | 'action_required' | 'created' | 'started' | 'disabled' | 'rejected' | 'withdrawn' | 'onboarding'>}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly status?: Array<ListConnectedAccountsStatus>

    /**
     * The partial search of text fields. Supports searching by &#x60;account.name&#x60;, &#x60;account.business_profile.legal_name&#x60;, &#x60;account.id&#x60;, &#x60;account.email&#x60;, &#x60;user.name&#x60;, &#x60;user.email&#x60;
     * @type {string}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly q?: string

    /**
     * Only return Connected Partner Accounts whose partner application status is included in this array. Examples: &#x60;/v1/accounts/connected?partner_application_status&#x3D;created,started&#x60; and &#x60;/v1/accounts/connected?partner_application_status&#x3D;submitted&#x60;.
     * @type {Array<'created' | 'started' | 'submitted'>}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly partner_application_status?: Array<ListConnectedAccountsPartnerApplicationStatus>

    /**
     * Only return Connected Partner Accounts who have an active capability with the specified processing capabilities.  Examples: &#x60;/v1/accounts/connected?processing_capabilities&#x3D;card,debit&#x60; and &#x60;/v1/accounts/connected?processing_capabilities&#x3D;card&#x60;.
     * @type {Array<'card' | 'card_present' | 'debit'>}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly processing_capabilities?: Array<ListConnectedAccountsProcessingCapabilities>

    /**
     * The sort parameters, value:direction. Possible values: &#x60;name&#x60;, &#x60;created_at&#x60;. Possible directions:  &#x60;asc&#x60;, &#x60;desc&#x60;  For example &#x60;name:asc&#x60;.  Default: &#x60;created_at:desc&#x60;
     * @type {string}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly sort?: string

    /**
     * Only return Connected Accounts where the type matches the specified value.
     * @type {'partner' | 'merchant' | 'reseller'}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly type?: ListConnectedAccountsType

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof AccountsApiListConnectedAccounts
     */
    readonly limit?: number
}

/**
 * Request parameters for updateAccount operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountRequest
 */
export interface AccountsApiUpdateAccountRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof AccountsApiUpdateAccount
     */
    readonly tilled_account: string

    /**
     * 
     * @type {AccountUpdateParams}
     * @memberof AccountsApiUpdateAccount
     */
    readonly AccountUpdateParams: AccountUpdateParams
}

/**
 * Request parameters for updateAccountCapability operation in AccountsApi.
 * @export
 * @interface AccountsApiUpdateAccountCapabilityRequest
 */
export interface AccountsApiUpdateAccountCapabilityRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof AccountsApiUpdateAccountCapability
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof AccountsApiUpdateAccountCapability
     */
    readonly id: string

    /**
     * 
     * @type {AccountCapabilityUpdateParams}
     * @memberof AccountsApiUpdateAccountCapability
     */
    readonly AccountCapabilityUpdateParams: AccountCapabilityUpdateParams
}

/**
 * AccountsApi - object-oriented interface
 * @export
 * @class AccountsApi
 * @extends {BaseAPI}
 */
export class AccountsApi extends BaseAPI {
    /**
     * Adds an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
     * @summary Add an Account Capability
     * @param {AccountsApiAddAccountCapabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public addAccountCapability(requestParameters: AccountsApiAddAccountCapabilityRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).addAccountCapability(requestParameters.tilled_account, requestParameters.AccountCapabilityCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a connected Account associated with your partner/parent Account.
     * @summary Create a Connected Account
     * @param {AccountsApiCreateConnectedAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public createConnectedAccount(requestParameters: AccountsApiCreateConnectedAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).createConnectedAccount(requestParameters.tilled_account, requestParameters.CreateConnectedAccountRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
     * @summary Delete an Account Capability
     * @param {AccountsApiDeleteAccountCapabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public deleteAccountCapability(requestParameters: AccountsApiDeleteAccountCapabilityRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).deleteAccountCapability(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a connected Account. This cannot be undone.
     * @summary Delete a Connected Account
     * @param {AccountsApiDeleteConnectedAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public deleteConnectedAccount(requestParameters: AccountsApiDeleteConnectedAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).deleteConnectedAccount(requestParameters.tilled_account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing Account.
     * @summary Get an Account
     * @param {AccountsApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public getAccount(requestParameters: AccountsApiGetAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).getAccount(requestParameters.tilled_account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of merchant Accounts. The Accounts are sorted with the most recently created appearing first. If the provided account type is merchant, the list is empty.
     * @summary List all Connected Accounts
     * @param {AccountsApiListConnectedAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public listConnectedAccounts(requestParameters: AccountsApiListConnectedAccountsRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).listConnectedAccounts(requestParameters.tilled_account, requestParameters.metadata, requestParameters.status, requestParameters.q, requestParameters.partner_application_status, requestParameters.processing_capabilities, requestParameters.sort, requestParameters.type, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an Account by setting the values of the provided parameters. Any parameters not provided remain unchanged.
     * @summary Update an Account
     * @param {AccountsApiUpdateAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public updateAccount(requestParameters: AccountsApiUpdateAccountRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).updateAccount(requestParameters.tilled_account, requestParameters.AccountUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an Account capability. Account capabilities can only be managed before the onboarding application is submitted.
     * @summary Update an Account Capability
     * @param {AccountsApiUpdateAccountCapabilityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApi
     */
    public updateAccountCapability(requestParameters: AccountsApiUpdateAccountCapabilityRequest, options?: RawAxiosRequestConfig) {
        return AccountsApiFp(this.configuration).updateAccountCapability(requestParameters.tilled_account, requestParameters.id, requestParameters.AccountCapabilityUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListConnectedAccountsStatus = {
    ACTIVE: 'active',
    REQUIRES_PRICING: 'requires_pricing',
    FUNDING_HOLD: 'funding_hold',
    ACCOUNT_REVIEW: 'account_review',
    PARTIALLY_ACTIVE: 'partially_active',
    ACTION_REQUIRED: 'action_required',
    CREATED: 'created',
    STARTED: 'started',
    DISABLED: 'disabled',
    REJECTED: 'rejected',
    WITHDRAWN: 'withdrawn',
    ONBOARDING: 'onboarding'
} as const;
export type ListConnectedAccountsStatus = typeof ListConnectedAccountsStatus[keyof typeof ListConnectedAccountsStatus];
/**
 * @export
 */
export const ListConnectedAccountsPartnerApplicationStatus = {
    CREATED: 'created',
    STARTED: 'started',
    SUBMITTED: 'submitted'
} as const;
export type ListConnectedAccountsPartnerApplicationStatus = typeof ListConnectedAccountsPartnerApplicationStatus[keyof typeof ListConnectedAccountsPartnerApplicationStatus];
/**
 * @export
 */
export const ListConnectedAccountsProcessingCapabilities = {
    CARD: 'card',
    CARD_PRESENT: 'card_present',
    DEBIT: 'debit'
} as const;
export type ListConnectedAccountsProcessingCapabilities = typeof ListConnectedAccountsProcessingCapabilities[keyof typeof ListConnectedAccountsProcessingCapabilities];
/**
 * @export
 */
export const ListConnectedAccountsType = {
    PARTNER: 'partner',
    MERCHANT: 'merchant',
    RESELLER: 'reseller'
} as const;
export type ListConnectedAccountsType = typeof ListConnectedAccountsType[keyof typeof ListConnectedAccountsType];
