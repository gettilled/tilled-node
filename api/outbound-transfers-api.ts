/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListOutboundTransfers200Response } from '../model';
// @ts-ignore
import { OutboundTransfer } from '../model';
// @ts-ignore
import { OutboundTransferCreateParams } from '../model';
/**
 * OutboundTransfersApi - axios parameter creator
 * @export
 */
export const OutboundTransfersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels an Outbound Transfer. An Outbound Transfer can only be canceled if its status is pending and funds have not yet been batched or paid out. If the cancellation is successful, the status is updated accordingly. If the Outbound Transfer cannot be canceled, an error message is returned.
         * @summary Cancel an Outbound Transfer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOutboundTransfer: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('cancelOutboundTransfer', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelOutboundTransfer', 'id', id)
            const localVarPath = `/v1/outbound-transfers/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an Outbound Transfer. If the request is successful, the status will be `pending`. If there is an error, the status will be `failed` or an error message will be returned.
         * @summary Create an Outbound Transfer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {OutboundTransferCreateParams} OutboundTransferCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundTransfer: async (tilled_account: string, OutboundTransferCreateParams: OutboundTransferCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createOutboundTransfer', 'tilled_account', tilled_account)
            // verify required parameter 'OutboundTransferCreateParams' is not null or undefined
            assertParamExists('createOutboundTransfer', 'OutboundTransferCreateParams', OutboundTransferCreateParams)
            const localVarPath = `/v1/outbound-transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(OutboundTransferCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing Outbound Transfer.
         * @summary Get an Outbound Transfer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundTransfer: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getOutboundTransfer', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOutboundTransfer', 'id', id)
            const localVarPath = `/v1/outbound-transfers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Outbound Transfers. The Outbound Transfers are sorted with the most recently created appearing first.
         * @summary List all Outbound Transfers
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {Array<'canceled' | 'failed' | 'pending' | 'succeeded'>} [status] Only return OutboundTransfers whose status is included by this array. Example: &#x60;/v1/outbound-transfers?status&#x3D;succeeded&#x60;
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {string} [created_at_gte] Minimum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {string} [created_at_lte] Maximum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOutboundTransfers: async (tilled_account: string, metadata?: { [key: string]: string; }, status?: Array<'canceled' | 'failed' | 'pending' | 'succeeded'>, include_connected_accounts?: boolean, created_at_gte?: string, created_at_lte?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listOutboundTransfers', 'tilled_account', tilled_account)
            const localVarPath = `/v1/outbound-transfers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (metadata !== undefined) {
                localVarQueryParameter['metadata'] = metadata;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }

            if (include_connected_accounts !== undefined) {
                localVarQueryParameter['include_connected_accounts'] = include_connected_accounts;
            }

            if (created_at_gte !== undefined) {
                localVarQueryParameter['created_at_gte'] = (created_at_gte as any instanceof Date) ?
                    (created_at_gte as any).toISOString() :
                    created_at_gte;
            }

            if (created_at_lte !== undefined) {
                localVarQueryParameter['created_at_lte'] = (created_at_lte as any instanceof Date) ?
                    (created_at_lte as any).toISOString() :
                    created_at_lte;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OutboundTransfersApi - functional programming interface
 * @export
 */
export const OutboundTransfersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OutboundTransfersApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels an Outbound Transfer. An Outbound Transfer can only be canceled if its status is pending and funds have not yet been batched or paid out. If the cancellation is successful, the status is updated accordingly. If the Outbound Transfer cannot be canceled, an error message is returned.
         * @summary Cancel an Outbound Transfer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOutboundTransfer(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutboundTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOutboundTransfer(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an Outbound Transfer. If the request is successful, the status will be `pending`. If there is an error, the status will be `failed` or an error message will be returned.
         * @summary Create an Outbound Transfer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {OutboundTransferCreateParams} OutboundTransferCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOutboundTransfer(tilled_account: string, OutboundTransferCreateParams: OutboundTransferCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutboundTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOutboundTransfer(tilled_account, OutboundTransferCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing Outbound Transfer.
         * @summary Get an Outbound Transfer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOutboundTransfer(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OutboundTransfer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOutboundTransfer(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Outbound Transfers. The Outbound Transfers are sorted with the most recently created appearing first.
         * @summary List all Outbound Transfers
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {Array<'canceled' | 'failed' | 'pending' | 'succeeded'>} [status] Only return OutboundTransfers whose status is included by this array. Example: &#x60;/v1/outbound-transfers?status&#x3D;succeeded&#x60;
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {string} [created_at_gte] Minimum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {string} [created_at_lte] Maximum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOutboundTransfers(tilled_account: string, metadata?: { [key: string]: string; }, status?: Array<'canceled' | 'failed' | 'pending' | 'succeeded'>, include_connected_accounts?: boolean, created_at_gte?: string, created_at_lte?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOutboundTransfers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOutboundTransfers(tilled_account, metadata, status, include_connected_accounts, created_at_gte, created_at_lte, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OutboundTransfersApi - factory interface
 * @export
 */
export const OutboundTransfersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OutboundTransfersApiFp(configuration)
    return {
        /**
         * Cancels an Outbound Transfer. An Outbound Transfer can only be canceled if its status is pending and funds have not yet been batched or paid out. If the cancellation is successful, the status is updated accordingly. If the Outbound Transfer cannot be canceled, an error message is returned.
         * @summary Cancel an Outbound Transfer
         * @param {OutboundTransfersApiCancelOutboundTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOutboundTransfer(requestParameters: OutboundTransfersApiCancelOutboundTransferRequest, options?: AxiosRequestConfig): AxiosPromise<OutboundTransfer> {
            return localVarFp.cancelOutboundTransfer(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an Outbound Transfer. If the request is successful, the status will be `pending`. If there is an error, the status will be `failed` or an error message will be returned.
         * @summary Create an Outbound Transfer
         * @param {OutboundTransfersApiCreateOutboundTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOutboundTransfer(requestParameters: OutboundTransfersApiCreateOutboundTransferRequest, options?: AxiosRequestConfig): AxiosPromise<OutboundTransfer> {
            return localVarFp.createOutboundTransfer(requestParameters.tilled_account, requestParameters.OutboundTransferCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing Outbound Transfer.
         * @summary Get an Outbound Transfer
         * @param {OutboundTransfersApiGetOutboundTransferRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOutboundTransfer(requestParameters: OutboundTransfersApiGetOutboundTransferRequest, options?: AxiosRequestConfig): AxiosPromise<OutboundTransfer> {
            return localVarFp.getOutboundTransfer(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Outbound Transfers. The Outbound Transfers are sorted with the most recently created appearing first.
         * @summary List all Outbound Transfers
         * @param {OutboundTransfersApiListOutboundTransfersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOutboundTransfers(requestParameters: OutboundTransfersApiListOutboundTransfersRequest, options?: AxiosRequestConfig): AxiosPromise<ListOutboundTransfers200Response> {
            return localVarFp.listOutboundTransfers(requestParameters.tilled_account, requestParameters.metadata, requestParameters.status, requestParameters.include_connected_accounts, requestParameters.created_at_gte, requestParameters.created_at_lte, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelOutboundTransfer operation in OutboundTransfersApi.
 * @export
 * @interface OutboundTransfersApiCancelOutboundTransferRequest
 */
export interface OutboundTransfersApiCancelOutboundTransferRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof OutboundTransfersApiCancelOutboundTransfer
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof OutboundTransfersApiCancelOutboundTransfer
     */
    readonly id: string
}

/**
 * Request parameters for createOutboundTransfer operation in OutboundTransfersApi.
 * @export
 * @interface OutboundTransfersApiCreateOutboundTransferRequest
 */
export interface OutboundTransfersApiCreateOutboundTransferRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof OutboundTransfersApiCreateOutboundTransfer
     */
    readonly tilled_account: string

    /**
     * 
     * @type {OutboundTransferCreateParams}
     * @memberof OutboundTransfersApiCreateOutboundTransfer
     */
    readonly OutboundTransferCreateParams: OutboundTransferCreateParams
}

/**
 * Request parameters for getOutboundTransfer operation in OutboundTransfersApi.
 * @export
 * @interface OutboundTransfersApiGetOutboundTransferRequest
 */
export interface OutboundTransfersApiGetOutboundTransferRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof OutboundTransfersApiGetOutboundTransfer
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof OutboundTransfersApiGetOutboundTransfer
     */
    readonly id: string
}

/**
 * Request parameters for listOutboundTransfers operation in OutboundTransfersApi.
 * @export
 * @interface OutboundTransfersApiListOutboundTransfersRequest
 */
export interface OutboundTransfersApiListOutboundTransfersRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof OutboundTransfersApiListOutboundTransfers
     */
    readonly tilled_account: string

    /**
     * &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
     * @type {{ [key: string]: string; }}
     * @memberof OutboundTransfersApiListOutboundTransfers
     */
    readonly metadata?: { [key: string]: string; }

    /**
     * Only return OutboundTransfers whose status is included by this array. Example: &#x60;/v1/outbound-transfers?status&#x3D;succeeded&#x60;
     * @type {Array<'canceled' | 'failed' | 'pending' | 'succeeded'>}
     * @memberof OutboundTransfersApiListOutboundTransfers
     */
    readonly status?: Array<'canceled' | 'failed' | 'pending' | 'succeeded'>

    /**
     * Whether or not to include the results from any connected accounts.
     * @type {boolean}
     * @memberof OutboundTransfersApiListOutboundTransfers
     */
    readonly include_connected_accounts?: boolean

    /**
     * Minimum &#x60;created_at&#x60; value to filter by (inclusive).
     * @type {string}
     * @memberof OutboundTransfersApiListOutboundTransfers
     */
    readonly created_at_gte?: string

    /**
     * Maximum &#x60;created_at&#x60; value to filter by (inclusive).
     * @type {string}
     * @memberof OutboundTransfersApiListOutboundTransfers
     */
    readonly created_at_lte?: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof OutboundTransfersApiListOutboundTransfers
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof OutboundTransfersApiListOutboundTransfers
     */
    readonly limit?: number
}

/**
 * OutboundTransfersApi - object-oriented interface
 * @export
 * @class OutboundTransfersApi
 * @extends {BaseAPI}
 */
export class OutboundTransfersApi extends BaseAPI {
    /**
     * Cancels an Outbound Transfer. An Outbound Transfer can only be canceled if its status is pending and funds have not yet been batched or paid out. If the cancellation is successful, the status is updated accordingly. If the Outbound Transfer cannot be canceled, an error message is returned.
     * @summary Cancel an Outbound Transfer
     * @param {OutboundTransfersApiCancelOutboundTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundTransfersApi
     */
    public cancelOutboundTransfer(requestParameters: OutboundTransfersApiCancelOutboundTransferRequest, options?: AxiosRequestConfig) {
        return OutboundTransfersApiFp(this.configuration).cancelOutboundTransfer(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an Outbound Transfer. If the request is successful, the status will be `pending`. If there is an error, the status will be `failed` or an error message will be returned.
     * @summary Create an Outbound Transfer
     * @param {OutboundTransfersApiCreateOutboundTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundTransfersApi
     */
    public createOutboundTransfer(requestParameters: OutboundTransfersApiCreateOutboundTransferRequest, options?: AxiosRequestConfig) {
        return OutboundTransfersApiFp(this.configuration).createOutboundTransfer(requestParameters.tilled_account, requestParameters.OutboundTransferCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing Outbound Transfer.
     * @summary Get an Outbound Transfer
     * @param {OutboundTransfersApiGetOutboundTransferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundTransfersApi
     */
    public getOutboundTransfer(requestParameters: OutboundTransfersApiGetOutboundTransferRequest, options?: AxiosRequestConfig) {
        return OutboundTransfersApiFp(this.configuration).getOutboundTransfer(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Outbound Transfers. The Outbound Transfers are sorted with the most recently created appearing first.
     * @summary List all Outbound Transfers
     * @param {OutboundTransfersApiListOutboundTransfersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OutboundTransfersApi
     */
    public listOutboundTransfers(requestParameters: OutboundTransfersApiListOutboundTransfersRequest, options?: AxiosRequestConfig) {
        return OutboundTransfersApiFp(this.configuration).listOutboundTransfers(requestParameters.tilled_account, requestParameters.metadata, requestParameters.status, requestParameters.include_connected_accounts, requestParameters.created_at_gte, requestParameters.created_at_lte, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
