/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListPricingTemplates200Response } from '../model';
// @ts-ignore
import { PricingTemplate } from '../model';
/**
 * PricingTemplatesApi - axios parameter creator
 * @export
 */
export const PricingTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the details of an existing Pricing Template.
         * @summary Get a Pricing Template
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingTemplate: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getPricingTemplate', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPricingTemplate', 'id', id)
            const localVarPath = `/v1/pricing-templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Pricing Templates. The Pricing Templates are sorted with the most recently created appearing first.
         * @summary List all Pricing Templates
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {'card' | 'ach_debit' | 'card_present' | 'eft_debit'} [type] String indicating the type to filter the result by.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPricingTemplates: async (tilled_account: string, type?: 'card' | 'ach_debit' | 'card_present' | 'eft_debit', offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listPricingTemplates', 'tilled_account', tilled_account)
            const localVarPath = `/v1/pricing-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PricingTemplatesApi - functional programming interface
 * @export
 */
export const PricingTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PricingTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the details of an existing Pricing Template.
         * @summary Get a Pricing Template
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricingTemplate(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PricingTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricingTemplate(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Pricing Templates. The Pricing Templates are sorted with the most recently created appearing first.
         * @summary List all Pricing Templates
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {'card' | 'ach_debit' | 'card_present' | 'eft_debit'} [type] String indicating the type to filter the result by.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPricingTemplates(tilled_account: string, type?: 'card' | 'ach_debit' | 'card_present' | 'eft_debit', offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPricingTemplates200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPricingTemplates(tilled_account, type, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PricingTemplatesApi - factory interface
 * @export
 */
export const PricingTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PricingTemplatesApiFp(configuration)
    return {
        /**
         * Retrieves the details of an existing Pricing Template.
         * @summary Get a Pricing Template
         * @param {PricingTemplatesApiGetPricingTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricingTemplate(requestParameters: PricingTemplatesApiGetPricingTemplateRequest, options?: AxiosRequestConfig): AxiosPromise<PricingTemplate> {
            return localVarFp.getPricingTemplate(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Pricing Templates. The Pricing Templates are sorted with the most recently created appearing first.
         * @summary List all Pricing Templates
         * @param {PricingTemplatesApiListPricingTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPricingTemplates(requestParameters: PricingTemplatesApiListPricingTemplatesRequest, options?: AxiosRequestConfig): AxiosPromise<ListPricingTemplates200Response> {
            return localVarFp.listPricingTemplates(requestParameters.tilled_account, requestParameters.type, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPricingTemplate operation in PricingTemplatesApi.
 * @export
 * @interface PricingTemplatesApiGetPricingTemplateRequest
 */
export interface PricingTemplatesApiGetPricingTemplateRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PricingTemplatesApiGetPricingTemplate
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PricingTemplatesApiGetPricingTemplate
     */
    readonly id: string
}

/**
 * Request parameters for listPricingTemplates operation in PricingTemplatesApi.
 * @export
 * @interface PricingTemplatesApiListPricingTemplatesRequest
 */
export interface PricingTemplatesApiListPricingTemplatesRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PricingTemplatesApiListPricingTemplates
     */
    readonly tilled_account: string

    /**
     * String indicating the type to filter the result by.
     * @type {'card' | 'ach_debit' | 'card_present' | 'eft_debit'}
     * @memberof PricingTemplatesApiListPricingTemplates
     */
    readonly type?: 'card' | 'ach_debit' | 'card_present' | 'eft_debit'

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof PricingTemplatesApiListPricingTemplates
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof PricingTemplatesApiListPricingTemplates
     */
    readonly limit?: number
}

/**
 * PricingTemplatesApi - object-oriented interface
 * @export
 * @class PricingTemplatesApi
 * @extends {BaseAPI}
 */
export class PricingTemplatesApi extends BaseAPI {
    /**
     * Retrieves the details of an existing Pricing Template.
     * @summary Get a Pricing Template
     * @param {PricingTemplatesApiGetPricingTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingTemplatesApi
     */
    public getPricingTemplate(requestParameters: PricingTemplatesApiGetPricingTemplateRequest, options?: AxiosRequestConfig) {
        return PricingTemplatesApiFp(this.configuration).getPricingTemplate(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Pricing Templates. The Pricing Templates are sorted with the most recently created appearing first.
     * @summary List all Pricing Templates
     * @param {PricingTemplatesApiListPricingTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PricingTemplatesApi
     */
    public listPricingTemplates(requestParameters: PricingTemplatesApiListPricingTemplatesRequest, options?: AxiosRequestConfig) {
        return PricingTemplatesApiFp(this.configuration).listPricingTemplates(requestParameters.tilled_account, requestParameters.type, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
