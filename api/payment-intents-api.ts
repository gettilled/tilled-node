/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListPaymentIntents200Response } from '../model';
// @ts-ignore
import { PaymentIntent } from '../model';
// @ts-ignore
import { PaymentIntentCancelParams } from '../model';
// @ts-ignore
import { PaymentIntentCaptureParams } from '../model';
// @ts-ignore
import { PaymentIntentConfirmParams } from '../model';
// @ts-ignore
import { PaymentIntentCreateParams } from '../model';
// @ts-ignore
import { PaymentIntentUpdateParams } from '../model';
/**
 * PaymentIntentsApi - axios parameter creator
 * @export
 */
export const PaymentIntentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels an existing Payment Intent. A Payment Intent can be canceled when it is in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, or `requires_action`. Once canceled, no additional charges will be made by the Payment Intent, and any operations on the Payment Intent will fail with an error.
         * @summary Cancel a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentIntentCancelParams} PaymentIntentCancelParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPaymentIntent: async (tilled_account: string, id: string, PaymentIntentCancelParams: PaymentIntentCancelParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('cancelPaymentIntent', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelPaymentIntent', 'id', id)
            // verify required parameter 'PaymentIntentCancelParams' is not null or undefined
            assertParamExists('cancelPaymentIntent', 'PaymentIntentCancelParams', PaymentIntentCancelParams)
            const localVarPath = `/v1/payment-intents/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentIntentCancelParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Captures a Payment Intent. Payment Intents can only be captured if their status is `requires_capture`. Uncaptured Payment Intents will be canceled exactly 7 days after creation.
         * @summary Capture a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentIntentCaptureParams} PaymentIntentCaptureParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePaymentIntent: async (tilled_account: string, id: string, PaymentIntentCaptureParams: PaymentIntentCaptureParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('capturePaymentIntent', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('capturePaymentIntent', 'id', id)
            // verify required parameter 'PaymentIntentCaptureParams' is not null or undefined
            assertParamExists('capturePaymentIntent', 'PaymentIntentCaptureParams', PaymentIntentCaptureParams)
            const localVarPath = `/v1/payment-intents/{id}/capture`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentIntentCaptureParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms a Payment Intent. Confirming indicates that the customer intends to pay with the provided payment method.
         * @summary Confirm a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentIntentConfirmParams} PaymentIntentConfirmParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPaymentIntent: async (tilled_account: string, id: string, PaymentIntentConfirmParams: PaymentIntentConfirmParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('confirmPaymentIntent', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('confirmPaymentIntent', 'id', id)
            // verify required parameter 'PaymentIntentConfirmParams' is not null or undefined
            assertParamExists('confirmPaymentIntent', 'PaymentIntentConfirmParams', PaymentIntentConfirmParams)
            const localVarPath = `/v1/payment-intents/{id}/confirm`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentIntentConfirmParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Payment Intent.
         * @summary Create a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {PaymentIntentCreateParams} PaymentIntentCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentIntent: async (tilled_account: string, PaymentIntentCreateParams: PaymentIntentCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createPaymentIntent', 'tilled_account', tilled_account)
            // verify required parameter 'PaymentIntentCreateParams' is not null or undefined
            assertParamExists('createPaymentIntent', 'PaymentIntentCreateParams', PaymentIntentCreateParams)
            const localVarPath = `/v1/payment-intents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentIntentCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing Payment Intent.
         * @summary Get a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentIntent: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getPaymentIntent', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPaymentIntent', 'id', id)
            const localVarPath = `/v1/payment-intents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Payment Intents. The Payment Intents are sorted with the most recently created appearing first.
         * @summary List all Payment Intents
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {string} [created_at_gte] Minimum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {string} [created_at_lte] Maximum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {Array<'canceled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded'>} [status] Only return PaymentIntents whose status is included by this array. Examples: &#x60;/v1/payment-intents?status&#x3D;succeeded,requires_payment_method&#x60; and &#x60;/v1/payment-intents?status&#x3D;succeeded&amp;status&#x3D;requires_payment_method&#x60;.
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {string} [subscription_id] The ID of the subscription whose payment intents will be retrieved.
         * @param {string} [q] Supports searching by &#x60;payment_intent.id&#x60;, &#x60;payment_intent.amount&#x60;, &#x60;payment_method.billing_details.name&#x60;, &#x60;payment_method.id&#x60;, &#x60;payment_method.details.last4&#x60;, &#x60;payment_method.details.last2&#x60;, &#x60;customer.first_name&#x60;, &#x60;customer.last_name&#x60;
         * @param {string} [customer_id] The ID of the customer whose payment intents will be retrieved.
         * @param {string} [terminal_reader_id] The ID of the terminal reader for which payment intents will be retrieved.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentIntents: async (tilled_account: string, metadata?: { [key: string]: string; }, created_at_gte?: string, created_at_lte?: string, status?: Array<'canceled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded'>, include_connected_accounts?: boolean, subscription_id?: string, q?: string, customer_id?: string, terminal_reader_id?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listPaymentIntents', 'tilled_account', tilled_account)
            const localVarPath = `/v1/payment-intents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (metadata !== undefined) {
                localVarQueryParameter['metadata'] = metadata;
            }

            if (created_at_gte !== undefined) {
                localVarQueryParameter['created_at_gte'] = (created_at_gte as any instanceof Date) ?
                    (created_at_gte as any).toISOString() :
                    created_at_gte;
            }

            if (created_at_lte !== undefined) {
                localVarQueryParameter['created_at_lte'] = (created_at_lte as any instanceof Date) ?
                    (created_at_lte as any).toISOString() :
                    created_at_lte;
            }

            if (status) {
                localVarQueryParameter['status'] = status;
            }

            if (include_connected_accounts !== undefined) {
                localVarQueryParameter['include_connected_accounts'] = include_connected_accounts;
            }

            if (subscription_id !== undefined) {
                localVarQueryParameter['subscription_id'] = subscription_id;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (customer_id !== undefined) {
                localVarQueryParameter['customer_id'] = customer_id;
            }

            if (terminal_reader_id !== undefined) {
                localVarQueryParameter['terminal_reader_id'] = terminal_reader_id;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Payment Intent by setting the values of the provided parameters. Any parameters not provided will be left unchanged. Depending on which properties are updated, you may need to [Confirm the Payment Intent](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents/{id}/confirm) again.
         * @summary Update a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentIntentUpdateParams} PaymentIntentUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentIntent: async (tilled_account: string, id: string, PaymentIntentUpdateParams: PaymentIntentUpdateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('updatePaymentIntent', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePaymentIntent', 'id', id)
            // verify required parameter 'PaymentIntentUpdateParams' is not null or undefined
            assertParamExists('updatePaymentIntent', 'PaymentIntentUpdateParams', PaymentIntentUpdateParams)
            const localVarPath = `/v1/payment-intents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentIntentUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentIntentsApi - functional programming interface
 * @export
 */
export const PaymentIntentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentIntentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels an existing Payment Intent. A Payment Intent can be canceled when it is in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, or `requires_action`. Once canceled, no additional charges will be made by the Payment Intent, and any operations on the Payment Intent will fail with an error.
         * @summary Cancel a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentIntentCancelParams} PaymentIntentCancelParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelPaymentIntent(tilled_account: string, id: string, PaymentIntentCancelParams: PaymentIntentCancelParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelPaymentIntent(tilled_account, id, PaymentIntentCancelParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Captures a Payment Intent. Payment Intents can only be captured if their status is `requires_capture`. Uncaptured Payment Intents will be canceled exactly 7 days after creation.
         * @summary Capture a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentIntentCaptureParams} PaymentIntentCaptureParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async capturePaymentIntent(tilled_account: string, id: string, PaymentIntentCaptureParams: PaymentIntentCaptureParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.capturePaymentIntent(tilled_account, id, PaymentIntentCaptureParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Confirms a Payment Intent. Confirming indicates that the customer intends to pay with the provided payment method.
         * @summary Confirm a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentIntentConfirmParams} PaymentIntentConfirmParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPaymentIntent(tilled_account: string, id: string, PaymentIntentConfirmParams: PaymentIntentConfirmParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPaymentIntent(tilled_account, id, PaymentIntentConfirmParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Payment Intent.
         * @summary Create a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {PaymentIntentCreateParams} PaymentIntentCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentIntent(tilled_account: string, PaymentIntentCreateParams: PaymentIntentCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentIntent(tilled_account, PaymentIntentCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing Payment Intent.
         * @summary Get a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentIntent(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentIntent(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Payment Intents. The Payment Intents are sorted with the most recently created appearing first.
         * @summary List all Payment Intents
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {string} [created_at_gte] Minimum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {string} [created_at_lte] Maximum &#x60;created_at&#x60; value to filter by (inclusive).
         * @param {Array<'canceled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded'>} [status] Only return PaymentIntents whose status is included by this array. Examples: &#x60;/v1/payment-intents?status&#x3D;succeeded,requires_payment_method&#x60; and &#x60;/v1/payment-intents?status&#x3D;succeeded&amp;status&#x3D;requires_payment_method&#x60;.
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {string} [subscription_id] The ID of the subscription whose payment intents will be retrieved.
         * @param {string} [q] Supports searching by &#x60;payment_intent.id&#x60;, &#x60;payment_intent.amount&#x60;, &#x60;payment_method.billing_details.name&#x60;, &#x60;payment_method.id&#x60;, &#x60;payment_method.details.last4&#x60;, &#x60;payment_method.details.last2&#x60;, &#x60;customer.first_name&#x60;, &#x60;customer.last_name&#x60;
         * @param {string} [customer_id] The ID of the customer whose payment intents will be retrieved.
         * @param {string} [terminal_reader_id] The ID of the terminal reader for which payment intents will be retrieved.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentIntents(tilled_account: string, metadata?: { [key: string]: string; }, created_at_gte?: string, created_at_lte?: string, status?: Array<'canceled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded'>, include_connected_accounts?: boolean, subscription_id?: string, q?: string, customer_id?: string, terminal_reader_id?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPaymentIntents200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPaymentIntents(tilled_account, metadata, created_at_gte, created_at_lte, status, include_connected_accounts, subscription_id, q, customer_id, terminal_reader_id, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Payment Intent by setting the values of the provided parameters. Any parameters not provided will be left unchanged. Depending on which properties are updated, you may need to [Confirm the Payment Intent](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents/{id}/confirm) again.
         * @summary Update a Payment Intent
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentIntentUpdateParams} PaymentIntentUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentIntent(tilled_account: string, id: string, PaymentIntentUpdateParams: PaymentIntentUpdateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentIntent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaymentIntent(tilled_account, id, PaymentIntentUpdateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentIntentsApi - factory interface
 * @export
 */
export const PaymentIntentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentIntentsApiFp(configuration)
    return {
        /**
         * Cancels an existing Payment Intent. A Payment Intent can be canceled when it is in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, or `requires_action`. Once canceled, no additional charges will be made by the Payment Intent, and any operations on the Payment Intent will fail with an error.
         * @summary Cancel a Payment Intent
         * @param {PaymentIntentsApiCancelPaymentIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPaymentIntent(requestParameters: PaymentIntentsApiCancelPaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.cancelPaymentIntent(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentIntentCancelParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Captures a Payment Intent. Payment Intents can only be captured if their status is `requires_capture`. Uncaptured Payment Intents will be canceled exactly 7 days after creation.
         * @summary Capture a Payment Intent
         * @param {PaymentIntentsApiCapturePaymentIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePaymentIntent(requestParameters: PaymentIntentsApiCapturePaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.capturePaymentIntent(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentIntentCaptureParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms a Payment Intent. Confirming indicates that the customer intends to pay with the provided payment method.
         * @summary Confirm a Payment Intent
         * @param {PaymentIntentsApiConfirmPaymentIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPaymentIntent(requestParameters: PaymentIntentsApiConfirmPaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.confirmPaymentIntent(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentIntentConfirmParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Payment Intent.
         * @summary Create a Payment Intent
         * @param {PaymentIntentsApiCreatePaymentIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentIntent(requestParameters: PaymentIntentsApiCreatePaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.createPaymentIntent(requestParameters.tilled_account, requestParameters.PaymentIntentCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing Payment Intent.
         * @summary Get a Payment Intent
         * @param {PaymentIntentsApiGetPaymentIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentIntent(requestParameters: PaymentIntentsApiGetPaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.getPaymentIntent(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Payment Intents. The Payment Intents are sorted with the most recently created appearing first.
         * @summary List all Payment Intents
         * @param {PaymentIntentsApiListPaymentIntentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentIntents(requestParameters: PaymentIntentsApiListPaymentIntentsRequest, options?: AxiosRequestConfig): AxiosPromise<ListPaymentIntents200Response> {
            return localVarFp.listPaymentIntents(requestParameters.tilled_account, requestParameters.metadata, requestParameters.created_at_gte, requestParameters.created_at_lte, requestParameters.status, requestParameters.include_connected_accounts, requestParameters.subscription_id, requestParameters.q, requestParameters.customer_id, requestParameters.terminal_reader_id, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Payment Intent by setting the values of the provided parameters. Any parameters not provided will be left unchanged. Depending on which properties are updated, you may need to [Confirm the Payment Intent](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents/{id}/confirm) again.
         * @summary Update a Payment Intent
         * @param {PaymentIntentsApiUpdatePaymentIntentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentIntent(requestParameters: PaymentIntentsApiUpdatePaymentIntentRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentIntent> {
            return localVarFp.updatePaymentIntent(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentIntentUpdateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelPaymentIntent operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiCancelPaymentIntentRequest
 */
export interface PaymentIntentsApiCancelPaymentIntentRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentIntentsApiCancelPaymentIntent
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentIntentsApiCancelPaymentIntent
     */
    readonly id: string

    /**
     * 
     * @type {PaymentIntentCancelParams}
     * @memberof PaymentIntentsApiCancelPaymentIntent
     */
    readonly PaymentIntentCancelParams: PaymentIntentCancelParams
}

/**
 * Request parameters for capturePaymentIntent operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiCapturePaymentIntentRequest
 */
export interface PaymentIntentsApiCapturePaymentIntentRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentIntentsApiCapturePaymentIntent
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentIntentsApiCapturePaymentIntent
     */
    readonly id: string

    /**
     * 
     * @type {PaymentIntentCaptureParams}
     * @memberof PaymentIntentsApiCapturePaymentIntent
     */
    readonly PaymentIntentCaptureParams: PaymentIntentCaptureParams
}

/**
 * Request parameters for confirmPaymentIntent operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiConfirmPaymentIntentRequest
 */
export interface PaymentIntentsApiConfirmPaymentIntentRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentIntentsApiConfirmPaymentIntent
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentIntentsApiConfirmPaymentIntent
     */
    readonly id: string

    /**
     * 
     * @type {PaymentIntentConfirmParams}
     * @memberof PaymentIntentsApiConfirmPaymentIntent
     */
    readonly PaymentIntentConfirmParams: PaymentIntentConfirmParams
}

/**
 * Request parameters for createPaymentIntent operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiCreatePaymentIntentRequest
 */
export interface PaymentIntentsApiCreatePaymentIntentRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentIntentsApiCreatePaymentIntent
     */
    readonly tilled_account: string

    /**
     * 
     * @type {PaymentIntentCreateParams}
     * @memberof PaymentIntentsApiCreatePaymentIntent
     */
    readonly PaymentIntentCreateParams: PaymentIntentCreateParams
}

/**
 * Request parameters for getPaymentIntent operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiGetPaymentIntentRequest
 */
export interface PaymentIntentsApiGetPaymentIntentRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentIntentsApiGetPaymentIntent
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentIntentsApiGetPaymentIntent
     */
    readonly id: string
}

/**
 * Request parameters for listPaymentIntents operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiListPaymentIntentsRequest
 */
export interface PaymentIntentsApiListPaymentIntentsRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly tilled_account: string

    /**
     * &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
     * @type {{ [key: string]: string; }}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly metadata?: { [key: string]: string; }

    /**
     * Minimum &#x60;created_at&#x60; value to filter by (inclusive).
     * @type {string}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly created_at_gte?: string

    /**
     * Maximum &#x60;created_at&#x60; value to filter by (inclusive).
     * @type {string}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly created_at_lte?: string

    /**
     * Only return PaymentIntents whose status is included by this array. Examples: &#x60;/v1/payment-intents?status&#x3D;succeeded,requires_payment_method&#x60; and &#x60;/v1/payment-intents?status&#x3D;succeeded&amp;status&#x3D;requires_payment_method&#x60;.
     * @type {Array<'canceled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded'>}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly status?: Array<'canceled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded'>

    /**
     * Whether or not to include the results from any connected accounts.
     * @type {boolean}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly include_connected_accounts?: boolean

    /**
     * The ID of the subscription whose payment intents will be retrieved.
     * @type {string}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly subscription_id?: string

    /**
     * Supports searching by &#x60;payment_intent.id&#x60;, &#x60;payment_intent.amount&#x60;, &#x60;payment_method.billing_details.name&#x60;, &#x60;payment_method.id&#x60;, &#x60;payment_method.details.last4&#x60;, &#x60;payment_method.details.last2&#x60;, &#x60;customer.first_name&#x60;, &#x60;customer.last_name&#x60;
     * @type {string}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly q?: string

    /**
     * The ID of the customer whose payment intents will be retrieved.
     * @type {string}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly customer_id?: string

    /**
     * The ID of the terminal reader for which payment intents will be retrieved.
     * @type {string}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly terminal_reader_id?: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof PaymentIntentsApiListPaymentIntents
     */
    readonly limit?: number
}

/**
 * Request parameters for updatePaymentIntent operation in PaymentIntentsApi.
 * @export
 * @interface PaymentIntentsApiUpdatePaymentIntentRequest
 */
export interface PaymentIntentsApiUpdatePaymentIntentRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentIntentsApiUpdatePaymentIntent
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentIntentsApiUpdatePaymentIntent
     */
    readonly id: string

    /**
     * 
     * @type {PaymentIntentUpdateParams}
     * @memberof PaymentIntentsApiUpdatePaymentIntent
     */
    readonly PaymentIntentUpdateParams: PaymentIntentUpdateParams
}

/**
 * PaymentIntentsApi - object-oriented interface
 * @export
 * @class PaymentIntentsApi
 * @extends {BaseAPI}
 */
export class PaymentIntentsApi extends BaseAPI {
    /**
     * Cancels an existing Payment Intent. A Payment Intent can be canceled when it is in one of these statuses: `requires_payment_method`, `requires_capture`, `requires_confirmation`, or `requires_action`. Once canceled, no additional charges will be made by the Payment Intent, and any operations on the Payment Intent will fail with an error.
     * @summary Cancel a Payment Intent
     * @param {PaymentIntentsApiCancelPaymentIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApi
     */
    public cancelPaymentIntent(requestParameters: PaymentIntentsApiCancelPaymentIntentRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).cancelPaymentIntent(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentIntentCancelParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Captures a Payment Intent. Payment Intents can only be captured if their status is `requires_capture`. Uncaptured Payment Intents will be canceled exactly 7 days after creation.
     * @summary Capture a Payment Intent
     * @param {PaymentIntentsApiCapturePaymentIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApi
     */
    public capturePaymentIntent(requestParameters: PaymentIntentsApiCapturePaymentIntentRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).capturePaymentIntent(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentIntentCaptureParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms a Payment Intent. Confirming indicates that the customer intends to pay with the provided payment method.
     * @summary Confirm a Payment Intent
     * @param {PaymentIntentsApiConfirmPaymentIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApi
     */
    public confirmPaymentIntent(requestParameters: PaymentIntentsApiConfirmPaymentIntentRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).confirmPaymentIntent(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentIntentConfirmParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Payment Intent.
     * @summary Create a Payment Intent
     * @param {PaymentIntentsApiCreatePaymentIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApi
     */
    public createPaymentIntent(requestParameters: PaymentIntentsApiCreatePaymentIntentRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).createPaymentIntent(requestParameters.tilled_account, requestParameters.PaymentIntentCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing Payment Intent.
     * @summary Get a Payment Intent
     * @param {PaymentIntentsApiGetPaymentIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApi
     */
    public getPaymentIntent(requestParameters: PaymentIntentsApiGetPaymentIntentRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).getPaymentIntent(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Payment Intents. The Payment Intents are sorted with the most recently created appearing first.
     * @summary List all Payment Intents
     * @param {PaymentIntentsApiListPaymentIntentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApi
     */
    public listPaymentIntents(requestParameters: PaymentIntentsApiListPaymentIntentsRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).listPaymentIntents(requestParameters.tilled_account, requestParameters.metadata, requestParameters.created_at_gte, requestParameters.created_at_lte, requestParameters.status, requestParameters.include_connected_accounts, requestParameters.subscription_id, requestParameters.q, requestParameters.customer_id, requestParameters.terminal_reader_id, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Payment Intent by setting the values of the provided parameters. Any parameters not provided will be left unchanged. Depending on which properties are updated, you may need to [Confirm the Payment Intent](https://docs.tilled.com/api-reference#tag/payment-intents/post/v1/payment-intents/{id}/confirm) again.
     * @summary Update a Payment Intent
     * @param {PaymentIntentsApiUpdatePaymentIntentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentIntentsApi
     */
    public updatePaymentIntent(requestParameters: PaymentIntentsApiUpdatePaymentIntentRequest, options?: AxiosRequestConfig) {
        return PaymentIntentsApiFp(this.configuration).updatePaymentIntent(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentIntentUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }
}
