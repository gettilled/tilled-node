/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListSubscriptions200Response } from '../model';
// @ts-ignore
import { Subscription } from '../model';
// @ts-ignore
import { SubscriptionCreateParams } from '../model';
// @ts-ignore
import { SubscriptionPauseParams } from '../model';
// @ts-ignore
import { SubscriptionRetryParams } from '../model';
// @ts-ignore
import { SubscriptionUpdateParams } from '../model';
/**
 * SubscriptionsApi - axios parameter creator
 * @export
 */
export const SubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels a Customer\'s Subscription immediately. The Customer will not be charged again for the Subscription.
         * @summary Cancel a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('cancelSubscription', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelSubscription', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new Subscription.
         * @summary Create a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {SubscriptionCreateParams} SubscriptionCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription: async (tilled_account: string, SubscriptionCreateParams: SubscriptionCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createSubscription', 'tilled_account', tilled_account)
            // verify required parameter 'SubscriptionCreateParams' is not null or undefined
            assertParamExists('createSubscription', 'SubscriptionCreateParams', SubscriptionCreateParams)
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(SubscriptionCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing Subscription.
         * @summary Get a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getSubscription', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSubscription', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Subscriptions. The Subscriptions are sorted with the most recently created appearing first.
         * @summary List all Subscriptions
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {string} [customer_id] The ID of the customer whose subscriptions will be retrieved.
         * @param {'active' | 'canceled' | 'past_due' | 'paused' | 'pending'} [status] The status of the subscriptions to retrieve.
         * @param {string} [next_payment_at_lte] Maximum &#x60;next_payment_at&#x60; value to filter by (inclusive).
         * @param {string} [next_payment_at_gte] Minimum &#x60;next_payment_at&#x60; value to filter by (inclusive).
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions: async (tilled_account: string, metadata?: { [key: string]: string; }, customer_id?: string, status?: 'active' | 'canceled' | 'past_due' | 'paused' | 'pending', next_payment_at_lte?: string, next_payment_at_gte?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listSubscriptions', 'tilled_account', tilled_account)
            const localVarPath = `/v1/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (metadata !== undefined) {
                localVarQueryParameter['metadata'] = metadata;
            }

            if (customer_id !== undefined) {
                localVarQueryParameter['customer_id'] = customer_id;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (next_payment_at_lte !== undefined) {
                localVarQueryParameter['next_payment_at_lte'] = (next_payment_at_lte as any instanceof Date) ?
                    (next_payment_at_lte as any).toISOString() :
                    next_payment_at_lte;
            }

            if (next_payment_at_gte !== undefined) {
                localVarQueryParameter['next_payment_at_gte'] = (next_payment_at_gte as any instanceof Date) ?
                    (next_payment_at_gte as any).toISOString() :
                    next_payment_at_gte;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pauses a Subscription from generating payments until the optionally specified `resumes_at` date.
         * @summary Pause a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {SubscriptionPauseParams} SubscriptionPauseParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription: async (tilled_account: string, id: string, SubscriptionPauseParams: SubscriptionPauseParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('pauseSubscription', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pauseSubscription', 'id', id)
            // verify required parameter 'SubscriptionPauseParams' is not null or undefined
            assertParamExists('pauseSubscription', 'SubscriptionPauseParams', SubscriptionPauseParams)
            const localVarPath = `/v1/subscriptions/{id}/pause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(SubscriptionPauseParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resumes a paused Subscription immediately. The next charge will occur on the regular billing cycle.
         * @summary Resume a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('resumeSubscription', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resumeSubscription', 'id', id)
            const localVarPath = `/v1/subscriptions/{id}/resume`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retries a subscription payment at the optionally specified `next_payment_at` date.
         * @summary Retry a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {SubscriptionRetryParams} SubscriptionRetryParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrySubscription: async (tilled_account: string, id: string, SubscriptionRetryParams: SubscriptionRetryParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('retrySubscription', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrySubscription', 'id', id)
            // verify required parameter 'SubscriptionRetryParams' is not null or undefined
            assertParamExists('retrySubscription', 'SubscriptionRetryParams', SubscriptionRetryParams)
            const localVarPath = `/v1/subscriptions/{id}/retry`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(SubscriptionRetryParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing Subscription by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {SubscriptionUpdateParams} SubscriptionUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: async (tilled_account: string, id: string, SubscriptionUpdateParams: SubscriptionUpdateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('updateSubscription', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateSubscription', 'id', id)
            // verify required parameter 'SubscriptionUpdateParams' is not null or undefined
            assertParamExists('updateSubscription', 'SubscriptionUpdateParams', SubscriptionUpdateParams)
            const localVarPath = `/v1/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(SubscriptionUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionsApi - functional programming interface
 * @export
 */
export const SubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels a Customer\'s Subscription immediately. The Customer will not be charged again for the Subscription.
         * @summary Cancel a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSubscription(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSubscription(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new Subscription.
         * @summary Create a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {SubscriptionCreateParams} SubscriptionCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscription(tilled_account: string, SubscriptionCreateParams: SubscriptionCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSubscription(tilled_account, SubscriptionCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing Subscription.
         * @summary Get a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscription(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscription(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Subscriptions. The Subscriptions are sorted with the most recently created appearing first.
         * @summary List all Subscriptions
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {string} [customer_id] The ID of the customer whose subscriptions will be retrieved.
         * @param {'active' | 'canceled' | 'past_due' | 'paused' | 'pending'} [status] The status of the subscriptions to retrieve.
         * @param {string} [next_payment_at_lte] Maximum &#x60;next_payment_at&#x60; value to filter by (inclusive).
         * @param {string} [next_payment_at_gte] Minimum &#x60;next_payment_at&#x60; value to filter by (inclusive).
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptions(tilled_account: string, metadata?: { [key: string]: string; }, customer_id?: string, status?: 'active' | 'canceled' | 'past_due' | 'paused' | 'pending', next_payment_at_lte?: string, next_payment_at_gte?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListSubscriptions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptions(tilled_account, metadata, customer_id, status, next_payment_at_lte, next_payment_at_gte, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Pauses a Subscription from generating payments until the optionally specified `resumes_at` date.
         * @summary Pause a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {SubscriptionPauseParams} SubscriptionPauseParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pauseSubscription(tilled_account: string, id: string, SubscriptionPauseParams: SubscriptionPauseParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pauseSubscription(tilled_account, id, SubscriptionPauseParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resumes a paused Subscription immediately. The next charge will occur on the regular billing cycle.
         * @summary Resume a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resumeSubscription(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resumeSubscription(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retries a subscription payment at the optionally specified `next_payment_at` date.
         * @summary Retry a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {SubscriptionRetryParams} SubscriptionRetryParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrySubscription(tilled_account: string, id: string, SubscriptionRetryParams: SubscriptionRetryParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrySubscription(tilled_account, id, SubscriptionRetryParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an existing Subscription by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update a Subscription
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {SubscriptionUpdateParams} SubscriptionUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscription(tilled_account: string, id: string, SubscriptionUpdateParams: SubscriptionUpdateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscription(tilled_account, id, SubscriptionUpdateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionsApi - factory interface
 * @export
 */
export const SubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionsApiFp(configuration)
    return {
        /**
         * Cancels a Customer\'s Subscription immediately. The Customer will not be charged again for the Subscription.
         * @summary Cancel a Subscription
         * @param {SubscriptionsApiCancelSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription(requestParameters: SubscriptionsApiCancelSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.cancelSubscription(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new Subscription.
         * @summary Create a Subscription
         * @param {SubscriptionsApiCreateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscription(requestParameters: SubscriptionsApiCreateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.createSubscription(requestParameters.tilled_account, requestParameters.SubscriptionCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing Subscription.
         * @summary Get a Subscription
         * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscription(requestParameters: SubscriptionsApiGetSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.getSubscription(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Subscriptions. The Subscriptions are sorted with the most recently created appearing first.
         * @summary List all Subscriptions
         * @param {SubscriptionsApiListSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions(requestParameters: SubscriptionsApiListSubscriptionsRequest, options?: AxiosRequestConfig): AxiosPromise<ListSubscriptions200Response> {
            return localVarFp.listSubscriptions(requestParameters.tilled_account, requestParameters.metadata, requestParameters.customer_id, requestParameters.status, requestParameters.next_payment_at_lte, requestParameters.next_payment_at_gte, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Pauses a Subscription from generating payments until the optionally specified `resumes_at` date.
         * @summary Pause a Subscription
         * @param {SubscriptionsApiPauseSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pauseSubscription(requestParameters: SubscriptionsApiPauseSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.pauseSubscription(requestParameters.tilled_account, requestParameters.id, requestParameters.SubscriptionPauseParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Resumes a paused Subscription immediately. The next charge will occur on the regular billing cycle.
         * @summary Resume a Subscription
         * @param {SubscriptionsApiResumeSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resumeSubscription(requestParameters: SubscriptionsApiResumeSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.resumeSubscription(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retries a subscription payment at the optionally specified `next_payment_at` date.
         * @summary Retry a Subscription
         * @param {SubscriptionsApiRetrySubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrySubscription(requestParameters: SubscriptionsApiRetrySubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.retrySubscription(requestParameters.tilled_account, requestParameters.id, requestParameters.SubscriptionRetryParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing Subscription by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update a Subscription
         * @param {SubscriptionsApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(requestParameters: SubscriptionsApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Subscription> {
            return localVarFp.updateSubscription(requestParameters.tilled_account, requestParameters.id, requestParameters.SubscriptionUpdateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiCancelSubscriptionRequest
 */
export interface SubscriptionsApiCancelSubscriptionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof SubscriptionsApiCancelSubscription
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiCancelSubscription
     */
    readonly id: string
}

/**
 * Request parameters for createSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiCreateSubscriptionRequest
 */
export interface SubscriptionsApiCreateSubscriptionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof SubscriptionsApiCreateSubscription
     */
    readonly tilled_account: string

    /**
     * 
     * @type {SubscriptionCreateParams}
     * @memberof SubscriptionsApiCreateSubscription
     */
    readonly SubscriptionCreateParams: SubscriptionCreateParams
}

/**
 * Request parameters for getSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiGetSubscriptionRequest
 */
export interface SubscriptionsApiGetSubscriptionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof SubscriptionsApiGetSubscription
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiGetSubscription
     */
    readonly id: string
}

/**
 * Request parameters for listSubscriptions operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiListSubscriptionsRequest
 */
export interface SubscriptionsApiListSubscriptionsRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptions
     */
    readonly tilled_account: string

    /**
     * &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
     * @type {{ [key: string]: string; }}
     * @memberof SubscriptionsApiListSubscriptions
     */
    readonly metadata?: { [key: string]: string; }

    /**
     * The ID of the customer whose subscriptions will be retrieved.
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptions
     */
    readonly customer_id?: string

    /**
     * The status of the subscriptions to retrieve.
     * @type {'active' | 'canceled' | 'past_due' | 'paused' | 'pending'}
     * @memberof SubscriptionsApiListSubscriptions
     */
    readonly status?: 'active' | 'canceled' | 'past_due' | 'paused' | 'pending'

    /**
     * Maximum &#x60;next_payment_at&#x60; value to filter by (inclusive).
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptions
     */
    readonly next_payment_at_lte?: string

    /**
     * Minimum &#x60;next_payment_at&#x60; value to filter by (inclusive).
     * @type {string}
     * @memberof SubscriptionsApiListSubscriptions
     */
    readonly next_payment_at_gte?: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof SubscriptionsApiListSubscriptions
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof SubscriptionsApiListSubscriptions
     */
    readonly limit?: number
}

/**
 * Request parameters for pauseSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiPauseSubscriptionRequest
 */
export interface SubscriptionsApiPauseSubscriptionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof SubscriptionsApiPauseSubscription
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiPauseSubscription
     */
    readonly id: string

    /**
     * 
     * @type {SubscriptionPauseParams}
     * @memberof SubscriptionsApiPauseSubscription
     */
    readonly SubscriptionPauseParams: SubscriptionPauseParams
}

/**
 * Request parameters for resumeSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiResumeSubscriptionRequest
 */
export interface SubscriptionsApiResumeSubscriptionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof SubscriptionsApiResumeSubscription
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiResumeSubscription
     */
    readonly id: string
}

/**
 * Request parameters for retrySubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiRetrySubscriptionRequest
 */
export interface SubscriptionsApiRetrySubscriptionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof SubscriptionsApiRetrySubscription
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiRetrySubscription
     */
    readonly id: string

    /**
     * 
     * @type {SubscriptionRetryParams}
     * @memberof SubscriptionsApiRetrySubscription
     */
    readonly SubscriptionRetryParams: SubscriptionRetryParams
}

/**
 * Request parameters for updateSubscription operation in SubscriptionsApi.
 * @export
 * @interface SubscriptionsApiUpdateSubscriptionRequest
 */
export interface SubscriptionsApiUpdateSubscriptionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof SubscriptionsApiUpdateSubscription
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof SubscriptionsApiUpdateSubscription
     */
    readonly id: string

    /**
     * 
     * @type {SubscriptionUpdateParams}
     * @memberof SubscriptionsApiUpdateSubscription
     */
    readonly SubscriptionUpdateParams: SubscriptionUpdateParams
}

/**
 * SubscriptionsApi - object-oriented interface
 * @export
 * @class SubscriptionsApi
 * @extends {BaseAPI}
 */
export class SubscriptionsApi extends BaseAPI {
    /**
     * Cancels a Customer\'s Subscription immediately. The Customer will not be charged again for the Subscription.
     * @summary Cancel a Subscription
     * @param {SubscriptionsApiCancelSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public cancelSubscription(requestParameters: SubscriptionsApiCancelSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).cancelSubscription(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new Subscription.
     * @summary Create a Subscription
     * @param {SubscriptionsApiCreateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public createSubscription(requestParameters: SubscriptionsApiCreateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).createSubscription(requestParameters.tilled_account, requestParameters.SubscriptionCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing Subscription.
     * @summary Get a Subscription
     * @param {SubscriptionsApiGetSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public getSubscription(requestParameters: SubscriptionsApiGetSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).getSubscription(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Subscriptions. The Subscriptions are sorted with the most recently created appearing first.
     * @summary List all Subscriptions
     * @param {SubscriptionsApiListSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public listSubscriptions(requestParameters: SubscriptionsApiListSubscriptionsRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).listSubscriptions(requestParameters.tilled_account, requestParameters.metadata, requestParameters.customer_id, requestParameters.status, requestParameters.next_payment_at_lte, requestParameters.next_payment_at_gte, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Pauses a Subscription from generating payments until the optionally specified `resumes_at` date.
     * @summary Pause a Subscription
     * @param {SubscriptionsApiPauseSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public pauseSubscription(requestParameters: SubscriptionsApiPauseSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).pauseSubscription(requestParameters.tilled_account, requestParameters.id, requestParameters.SubscriptionPauseParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resumes a paused Subscription immediately. The next charge will occur on the regular billing cycle.
     * @summary Resume a Subscription
     * @param {SubscriptionsApiResumeSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public resumeSubscription(requestParameters: SubscriptionsApiResumeSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).resumeSubscription(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retries a subscription payment at the optionally specified `next_payment_at` date.
     * @summary Retry a Subscription
     * @param {SubscriptionsApiRetrySubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public retrySubscription(requestParameters: SubscriptionsApiRetrySubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).retrySubscription(requestParameters.tilled_account, requestParameters.id, requestParameters.SubscriptionRetryParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing Subscription by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
     * @summary Update a Subscription
     * @param {SubscriptionsApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionsApi
     */
    public updateSubscription(requestParameters: SubscriptionsApiUpdateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionsApiFp(this.configuration).updateSubscription(requestParameters.tilled_account, requestParameters.id, requestParameters.SubscriptionUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }
}
