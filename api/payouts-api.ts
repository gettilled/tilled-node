/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ListPayouts200Response } from '../model';
// @ts-ignore
import type { Payout } from '../model';
/**
 * PayoutsApi - axios parameter creator
 * @export
 */
export const PayoutsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the details of an existing Payout.
         * @summary Get a Payout
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {Array<GetPayoutInclude>} [include] An array of optional include parameters, specifying extra properties to return. Currently for this endpoint only accepts \&#39;transaction_count\&#39;. In the query parameters, this is specified as include&#x3D;value1,value2,value3,etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayout: async (tilled_account: string, id: string, include?: Array<GetPayoutInclude>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getPayout', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPayout', 'id', id)
            const localVarPath = `/v1/payouts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (include) {
                localVarQueryParameter['include'] = include;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Payouts. The Payouts are sorted with the most recently created appearing first.
         * @summary List all Payouts
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} [created_at_gte] Minimum &#x60;created_at&#x60; value to filter by (inclusive). Cannot be paired with paid_at_gte or paid_at_lte.
         * @param {string} [created_at_lte] Maximum &#x60;created_at&#x60; value to filter by (inclusive). Cannot be paired with paid_at_gte or paid_at_lte.
         * @param {string} [paid_at_gte] Minimum &#x60;paid_at&#x60; value to filter by (inclusive). Cannot be paired with created_at_gte or created_at_lte.
         * @param {string} [paid_at_lte] Maximum &#x60;paid_at&#x60; value to filter by (inclusive). Cannot be paired with created_at_gte or created_at_lte.
         * @param {ListPayoutsStatus} [status] Only return payouts that have the given status.
         * @param {ListPayoutsInclude} [include] An array of optional include parameters, specifying extra properties to return. Currently for this endpoint only accepts \&#39;transaction_count\&#39;. In the query parameters, this is specified as include&#x3D;value1,value2,value3,etc.
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {string} [q] Supports searching by &#x60;payouts.id&#x60;, &#x60;payouts.amount&#x60;
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayouts: async (tilled_account: string, created_at_gte?: string, created_at_lte?: string, paid_at_gte?: string, paid_at_lte?: string, status?: ListPayoutsStatus, include?: ListPayoutsInclude, include_connected_accounts?: boolean, q?: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listPayouts', 'tilled_account', tilled_account)
            const localVarPath = `/v1/payouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (created_at_gte !== undefined) {
                localVarQueryParameter['created_at_gte'] = (created_at_gte as any instanceof Date) ?
                    (created_at_gte as any).toISOString() :
                    created_at_gte;
            }

            if (created_at_lte !== undefined) {
                localVarQueryParameter['created_at_lte'] = (created_at_lte as any instanceof Date) ?
                    (created_at_lte as any).toISOString() :
                    created_at_lte;
            }

            if (paid_at_gte !== undefined) {
                localVarQueryParameter['paid_at_gte'] = (paid_at_gte as any instanceof Date) ?
                    (paid_at_gte as any).toISOString() :
                    paid_at_gte;
            }

            if (paid_at_lte !== undefined) {
                localVarQueryParameter['paid_at_lte'] = (paid_at_lte as any instanceof Date) ?
                    (paid_at_lte as any).toISOString() :
                    paid_at_lte;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (include_connected_accounts !== undefined) {
                localVarQueryParameter['include_connected_accounts'] = include_connected_accounts;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayoutsApi - functional programming interface
 * @export
 */
export const PayoutsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayoutsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the details of an existing Payout.
         * @summary Get a Payout
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {Array<GetPayoutInclude>} [include] An array of optional include parameters, specifying extra properties to return. Currently for this endpoint only accepts \&#39;transaction_count\&#39;. In the query parameters, this is specified as include&#x3D;value1,value2,value3,etc.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPayout(tilled_account: string, id: string, include?: Array<GetPayoutInclude>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payout>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPayout(tilled_account, id, include, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutsApi.getPayout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of Payouts. The Payouts are sorted with the most recently created appearing first.
         * @summary List all Payouts
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} [created_at_gte] Minimum &#x60;created_at&#x60; value to filter by (inclusive). Cannot be paired with paid_at_gte or paid_at_lte.
         * @param {string} [created_at_lte] Maximum &#x60;created_at&#x60; value to filter by (inclusive). Cannot be paired with paid_at_gte or paid_at_lte.
         * @param {string} [paid_at_gte] Minimum &#x60;paid_at&#x60; value to filter by (inclusive). Cannot be paired with created_at_gte or created_at_lte.
         * @param {string} [paid_at_lte] Maximum &#x60;paid_at&#x60; value to filter by (inclusive). Cannot be paired with created_at_gte or created_at_lte.
         * @param {ListPayoutsStatus} [status] Only return payouts that have the given status.
         * @param {ListPayoutsInclude} [include] An array of optional include parameters, specifying extra properties to return. Currently for this endpoint only accepts \&#39;transaction_count\&#39;. In the query parameters, this is specified as include&#x3D;value1,value2,value3,etc.
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {string} [q] Supports searching by &#x60;payouts.id&#x60;, &#x60;payouts.amount&#x60;
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPayouts(tilled_account: string, created_at_gte?: string, created_at_lte?: string, paid_at_gte?: string, paid_at_lte?: string, status?: ListPayoutsStatus, include?: ListPayoutsInclude, include_connected_accounts?: boolean, q?: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPayouts200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPayouts(tilled_account, created_at_gte, created_at_lte, paid_at_gte, paid_at_lte, status, include, include_connected_accounts, q, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PayoutsApi.listPayouts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PayoutsApi - factory interface
 * @export
 */
export const PayoutsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayoutsApiFp(configuration)
    return {
        /**
         * Retrieves the details of an existing Payout.
         * @summary Get a Payout
         * @param {PayoutsApiGetPayoutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPayout(requestParameters: PayoutsApiGetPayoutRequest, options?: RawAxiosRequestConfig): AxiosPromise<Payout> {
            return localVarFp.getPayout(requestParameters.tilled_account, requestParameters.id, requestParameters.include, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Payouts. The Payouts are sorted with the most recently created appearing first.
         * @summary List all Payouts
         * @param {PayoutsApiListPayoutsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPayouts(requestParameters: PayoutsApiListPayoutsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListPayouts200Response> {
            return localVarFp.listPayouts(requestParameters.tilled_account, requestParameters.created_at_gte, requestParameters.created_at_lte, requestParameters.paid_at_gte, requestParameters.paid_at_lte, requestParameters.status, requestParameters.include, requestParameters.include_connected_accounts, requestParameters.q, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPayout operation in PayoutsApi.
 * @export
 * @interface PayoutsApiGetPayoutRequest
 */
export interface PayoutsApiGetPayoutRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PayoutsApiGetPayout
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PayoutsApiGetPayout
     */
    readonly id: string

    /**
     * An array of optional include parameters, specifying extra properties to return. Currently for this endpoint only accepts \&#39;transaction_count\&#39;. In the query parameters, this is specified as include&#x3D;value1,value2,value3,etc.
     * @type {Array<'transaction_count'>}
     * @memberof PayoutsApiGetPayout
     */
    readonly include?: Array<GetPayoutInclude>
}

/**
 * Request parameters for listPayouts operation in PayoutsApi.
 * @export
 * @interface PayoutsApiListPayoutsRequest
 */
export interface PayoutsApiListPayoutsRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PayoutsApiListPayouts
     */
    readonly tilled_account: string

    /**
     * Minimum &#x60;created_at&#x60; value to filter by (inclusive). Cannot be paired with paid_at_gte or paid_at_lte.
     * @type {string}
     * @memberof PayoutsApiListPayouts
     */
    readonly created_at_gte?: string

    /**
     * Maximum &#x60;created_at&#x60; value to filter by (inclusive). Cannot be paired with paid_at_gte or paid_at_lte.
     * @type {string}
     * @memberof PayoutsApiListPayouts
     */
    readonly created_at_lte?: string

    /**
     * Minimum &#x60;paid_at&#x60; value to filter by (inclusive). Cannot be paired with created_at_gte or created_at_lte.
     * @type {string}
     * @memberof PayoutsApiListPayouts
     */
    readonly paid_at_gte?: string

    /**
     * Maximum &#x60;paid_at&#x60; value to filter by (inclusive). Cannot be paired with created_at_gte or created_at_lte.
     * @type {string}
     * @memberof PayoutsApiListPayouts
     */
    readonly paid_at_lte?: string

    /**
     * Only return payouts that have the given status.
     * @type {'canceled' | 'failed' | 'in_transit' | 'paid' | 'pending'}
     * @memberof PayoutsApiListPayouts
     */
    readonly status?: ListPayoutsStatus

    /**
     * An array of optional include parameters, specifying extra properties to return. Currently for this endpoint only accepts \&#39;transaction_count\&#39;. In the query parameters, this is specified as include&#x3D;value1,value2,value3,etc.
     * @type {'transaction_count'}
     * @memberof PayoutsApiListPayouts
     */
    readonly include?: ListPayoutsInclude

    /**
     * Whether or not to include the results from any connected accounts.
     * @type {boolean}
     * @memberof PayoutsApiListPayouts
     */
    readonly include_connected_accounts?: boolean

    /**
     * Supports searching by &#x60;payouts.id&#x60;, &#x60;payouts.amount&#x60;
     * @type {string}
     * @memberof PayoutsApiListPayouts
     */
    readonly q?: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof PayoutsApiListPayouts
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof PayoutsApiListPayouts
     */
    readonly limit?: number
}

/**
 * PayoutsApi - object-oriented interface
 * @export
 * @class PayoutsApi
 * @extends {BaseAPI}
 */
export class PayoutsApi extends BaseAPI {
    /**
     * Retrieves the details of an existing Payout.
     * @summary Get a Payout
     * @param {PayoutsApiGetPayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApi
     */
    public getPayout(requestParameters: PayoutsApiGetPayoutRequest, options?: RawAxiosRequestConfig) {
        return PayoutsApiFp(this.configuration).getPayout(requestParameters.tilled_account, requestParameters.id, requestParameters.include, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Payouts. The Payouts are sorted with the most recently created appearing first.
     * @summary List all Payouts
     * @param {PayoutsApiListPayoutsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApi
     */
    public listPayouts(requestParameters: PayoutsApiListPayoutsRequest, options?: RawAxiosRequestConfig) {
        return PayoutsApiFp(this.configuration).listPayouts(requestParameters.tilled_account, requestParameters.created_at_gte, requestParameters.created_at_lte, requestParameters.paid_at_gte, requestParameters.paid_at_lte, requestParameters.status, requestParameters.include, requestParameters.include_connected_accounts, requestParameters.q, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetPayoutInclude = {
    TRANSACTION_COUNT: 'transaction_count'
} as const;
export type GetPayoutInclude = typeof GetPayoutInclude[keyof typeof GetPayoutInclude];
/**
 * @export
 */
export const ListPayoutsStatus = {
    CANCELED: 'canceled',
    FAILED: 'failed',
    IN_TRANSIT: 'in_transit',
    PAID: 'paid',
    PENDING: 'pending'
} as const;
export type ListPayoutsStatus = typeof ListPayoutsStatus[keyof typeof ListPayoutsStatus];
/**
 * @export
 */
export const ListPayoutsInclude = {
    TRANSACTION_COUNT: 'transaction_count'
} as const;
export type ListPayoutsInclude = typeof ListPayoutsInclude[keyof typeof ListPayoutsInclude];
