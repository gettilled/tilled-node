/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AccessTokenRefreshParams } from '../model';
// @ts-ignore
import type { ForgotPasswordParams } from '../model';
// @ts-ignore
import type { ListUserInvitations200Response } from '../model';
// @ts-ignore
import type { ListUsers200Response } from '../model';
// @ts-ignore
import type { LoginDto } from '../model';
// @ts-ignore
import type { LoginParams } from '../model';
// @ts-ignore
import type { RegisterDto } from '../model';
// @ts-ignore
import type { RegisterParams } from '../model';
// @ts-ignore
import type { User } from '../model';
// @ts-ignore
import type { UserCreateParams } from '../model';
// @ts-ignore
import type { UserInvitation } from '../model';
// @ts-ignore
import type { UserInvitationCheck } from '../model';
// @ts-ignore
import type { UserInvitationCreateParams } from '../model';
// @ts-ignore
import type { UserResetPasswordParams } from '../model';
// @ts-ignore
import type { UserUpdateParams } from '../model';
/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks for an existing User invitation.
         * @summary Check a User Invitation
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserInvitation: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('checkUserInvitation', 'id', id)
            const localVarPath = `/v1/user-invitations/check/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User. Note: While the `Create User` endpoint has been un-deprecated for use cases requiring seamless authentication, we strongly encourage developers to utilize [User Invitations](https://docs.tilled.com/api-reference#tag/users/POST/v1/user-invitations) for a more secure and user-friendly experience. User Invitations ensure email verification and allow users to set their own credentials, aligning with best practices for account management.
         * @summary Create a User
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {UserCreateParams} UserCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (tilled_account: string, UserCreateParams: UserCreateParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createUser', 'tilled_account', tilled_account)
            // verify required parameter 'UserCreateParams' is not null or undefined
            assertParamExists('createUser', 'UserCreateParams', UserCreateParams)
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UserCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User invitation. Upon creation, an invitation email is sent to the User’s email address. Once the User registers for an Account, the invitation is deleted.
         * @summary Create a User Invitation
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {UserInvitationCreateParams} UserInvitationCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserInvitation: async (tilled_account: string, UserInvitationCreateParams: UserInvitationCreateParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createUserInvitation', 'tilled_account', tilled_account)
            // verify required parameter 'UserInvitationCreateParams' is not null or undefined
            assertParamExists('createUserInvitation', 'UserInvitationCreateParams', UserInvitationCreateParams)
            const localVarPath = `/v1/user-invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UserInvitationCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a User from a specific Account. If this is the User\'s only Account, the User is permanently deleted. This cannot be undone.
         * @summary Delete a User
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (tilled_account: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('deleteUser', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a User invitation. This cannot be undone.
         * @summary Delete a User Invitation
         * @param {string} id 
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserInvitation: async (id: string, tilled_account: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserInvitation', 'id', id)
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('deleteUserInvitation', 'tilled_account', tilled_account)
            const localVarPath = `/v1/user-invitations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests a temporary link be sent to the provided email address, allowing the User to reset their password.
         * @summary Forgot Password
         * @param {ForgotPasswordParams} ForgotPasswordParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword: async (ForgotPasswordParams: ForgotPasswordParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ForgotPasswordParams' is not null or undefined
            assertParamExists('forgotPassword', 'ForgotPasswordParams', ForgotPasswordParams)
            const localVarPath = `/v1/auth/forgot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ForgotPasswordParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing User.
         * @summary Get a User
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (tilled_account: string, id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getUser', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing User invitation.
         * @summary Get a User Invitation
         * @param {string} id 
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInvitation: async (id: string, tilled_account: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserInvitation', 'id', id)
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getUserInvitation', 'tilled_account', tilled_account)
            const localVarPath = `/v1/user-invitations/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of User invitations. The User invitations are sorted with the most recently created appearing first.
         * @summary List all User Invitations
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserInvitations: async (tilled_account: string, offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listUserInvitations', 'tilled_account', tilled_account)
            const localVarPath = `/v1/user-invitations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Users. The Users are sorted with the most recently created appearing first.
         * @summary List all Users
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (tilled_account: string, offset?: number, limit?: number, include_connected_accounts?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listUsers', 'tilled_account', tilled_account)
            const localVarPath = `/v1/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (include_connected_accounts !== undefined) {
                localVarQueryParameter['include_connected_accounts'] = include_connected_accounts;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a JSON Web Token.
         * @summary Login
         * @param {LoginParams} LoginParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (LoginParams: LoginParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'LoginParams' is not null or undefined
            assertParamExists('login', 'LoginParams', LoginParams)
            const localVarPath = `/v1/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(LoginParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Invalidates a User’s refresh token.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates a new access token with a User\'s refresh token.
         * @summary Refresh an Access Token
         * @param {AccessTokenRefreshParams} AccessTokenRefreshParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken: async (AccessTokenRefreshParams: AccessTokenRefreshParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'AccessTokenRefreshParams' is not null or undefined
            assertParamExists('refreshAccessToken', 'AccessTokenRefreshParams', AccessTokenRefreshParams)
            const localVarPath = `/v1/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(AccessTokenRefreshParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a User and simultaneously creates a partner Account. Note: This endpoint should only be used in the Sandbox environment.
         * @summary Register
         * @param {RegisterParams} RegisterParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (RegisterParams: RegisterParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'RegisterParams' is not null or undefined
            assertParamExists('register', 'RegisterParams', RegisterParams)
            const localVarPath = `/v1/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(RegisterParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resends an existing User invitation.
         * @summary Resend a User Invitation
         * @param {string} id 
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendUserInvitation: async (id: string, tilled_account: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('resendUserInvitation', 'id', id)
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('resendUserInvitation', 'tilled_account', tilled_account)
            const localVarPath = `/v1/user-invitations/{id}/resend`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resets a User\'s password. Resetting the password will also invalidate the User\'s refresh token.
         * @summary Reset Password
         * @param {UserResetPasswordParams} UserResetPasswordParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (UserResetPasswordParams: UserResetPasswordParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'UserResetPasswordParams' is not null or undefined
            assertParamExists('resetPassword', 'UserResetPasswordParams', UserResetPasswordParams)
            const localVarPath = `/v1/auth/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UserResetPasswordParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a User by setting the values of the provided parameters. Any parameters not provided remain unchanged.
         * @summary Update a User
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {UserUpdateParams} UserUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (tilled_account: string, id: string, UserUpdateParams: UserUpdateParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('updateUser', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'UserUpdateParams' is not null or undefined
            assertParamExists('updateUser', 'UserUpdateParams', UserUpdateParams)
            const localVarPath = `/v1/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(UserUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Checks for an existing User invitation.
         * @summary Check a User Invitation
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkUserInvitation(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInvitationCheck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkUserInvitation(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.checkUserInvitation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a User. Note: While the `Create User` endpoint has been un-deprecated for use cases requiring seamless authentication, we strongly encourage developers to utilize [User Invitations](https://docs.tilled.com/api-reference#tag/users/POST/v1/user-invitations) for a more secure and user-friendly experience. User Invitations ensure email verification and allow users to set their own credentials, aligning with best practices for account management.
         * @summary Create a User
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {UserCreateParams} UserCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(tilled_account: string, UserCreateParams: UserCreateParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(tilled_account, UserCreateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.createUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a User invitation. Upon creation, an invitation email is sent to the User’s email address. Once the User registers for an Account, the invitation is deleted.
         * @summary Create a User Invitation
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {UserInvitationCreateParams} UserInvitationCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserInvitation(tilled_account: string, UserInvitationCreateParams: UserInvitationCreateParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserInvitation(tilled_account, UserInvitationCreateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.createUserInvitation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a User from a specific Account. If this is the User\'s only Account, the User is permanently deleted. This cannot be undone.
         * @summary Delete a User
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(tilled_account: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(tilled_account, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Deletes a User invitation. This cannot be undone.
         * @summary Delete a User Invitation
         * @param {string} id 
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserInvitation(id: string, tilled_account: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserInvitation(id, tilled_account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteUserInvitation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Requests a temporary link be sent to the provided email address, allowing the User to reset their password.
         * @summary Forgot Password
         * @param {ForgotPasswordParams} ForgotPasswordParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forgotPassword(ForgotPasswordParams: ForgotPasswordParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forgotPassword(ForgotPasswordParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.forgotPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the details of an existing User.
         * @summary Get a User
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(tilled_account: string, id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(tilled_account, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the details of an existing User invitation.
         * @summary Get a User Invitation
         * @param {string} id 
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInvitation(id: string, tilled_account: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInvitation(id, tilled_account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserInvitation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of User invitations. The User invitations are sorted with the most recently created appearing first.
         * @summary List all User Invitations
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserInvitations(tilled_account: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserInvitations200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserInvitations(tilled_account, offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.listUserInvitations']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of Users. The Users are sorted with the most recently created appearing first.
         * @summary List all Users
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {boolean} [include_connected_accounts] Whether or not to include the results from any connected accounts.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(tilled_account: string, offset?: number, limit?: number, include_connected_accounts?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(tilled_account, offset, limit, include_connected_accounts, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.listUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a JSON Web Token.
         * @summary Login
         * @param {LoginParams} LoginParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(LoginParams: LoginParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(LoginParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Invalidates a User’s refresh token.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.logout']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generates a new access token with a User\'s refresh token.
         * @summary Refresh an Access Token
         * @param {AccessTokenRefreshParams} AccessTokenRefreshParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshAccessToken(AccessTokenRefreshParams: AccessTokenRefreshParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshAccessToken(AccessTokenRefreshParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.refreshAccessToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a User and simultaneously creates a partner Account. Note: This endpoint should only be used in the Sandbox environment.
         * @summary Register
         * @param {RegisterParams} RegisterParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(RegisterParams: RegisterParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegisterDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(RegisterParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.register']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resends an existing User invitation.
         * @summary Resend a User Invitation
         * @param {string} id 
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resendUserInvitation(id: string, tilled_account: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInvitation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resendUserInvitation(id, tilled_account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.resendUserInvitation']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Resets a User\'s password. Resetting the password will also invalidate the User\'s refresh token.
         * @summary Reset Password
         * @param {UserResetPasswordParams} UserResetPasswordParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(UserResetPasswordParams: UserResetPasswordParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.resetPassword(UserResetPasswordParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.resetPassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates a User by setting the values of the provided parameters. Any parameters not provided remain unchanged.
         * @summary Update a User
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {UserUpdateParams} UserUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(tilled_account: string, id: string, UserUpdateParams: UserUpdateParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(tilled_account, id, UserUpdateParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Checks for an existing User invitation.
         * @summary Check a User Invitation
         * @param {UsersApiCheckUserInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkUserInvitation(requestParameters: UsersApiCheckUserInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserInvitationCheck> {
            return localVarFp.checkUserInvitation(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User. Note: While the `Create User` endpoint has been un-deprecated for use cases requiring seamless authentication, we strongly encourage developers to utilize [User Invitations](https://docs.tilled.com/api-reference#tag/users/POST/v1/user-invitations) for a more secure and user-friendly experience. User Invitations ensure email verification and allow users to set their own credentials, aligning with best practices for account management.
         * @summary Create a User
         * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(requestParameters: UsersApiCreateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.createUser(requestParameters.tilled_account, requestParameters.UserCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User invitation. Upon creation, an invitation email is sent to the User’s email address. Once the User registers for an Account, the invitation is deleted.
         * @summary Create a User Invitation
         * @param {UsersApiCreateUserInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserInvitation(requestParameters: UsersApiCreateUserInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserInvitation> {
            return localVarFp.createUserInvitation(requestParameters.tilled_account, requestParameters.UserInvitationCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a User from a specific Account. If this is the User\'s only Account, the User is permanently deleted. This cannot be undone.
         * @summary Delete a User
         * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteUser(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a User invitation. This cannot be undone.
         * @summary Delete a User Invitation
         * @param {UsersApiDeleteUserInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserInvitation(requestParameters: UsersApiDeleteUserInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteUserInvitation(requestParameters.id, requestParameters.tilled_account, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests a temporary link be sent to the provided email address, allowing the User to reset their password.
         * @summary Forgot Password
         * @param {UsersApiForgotPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forgotPassword(requestParameters: UsersApiForgotPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.forgotPassword(requestParameters.ForgotPasswordParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing User.
         * @summary Get a User
         * @param {UsersApiGetUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(requestParameters: UsersApiGetUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.getUser(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing User invitation.
         * @summary Get a User Invitation
         * @param {UsersApiGetUserInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInvitation(requestParameters: UsersApiGetUserInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserInvitation> {
            return localVarFp.getUserInvitation(requestParameters.id, requestParameters.tilled_account, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of User invitations. The User invitations are sorted with the most recently created appearing first.
         * @summary List all User Invitations
         * @param {UsersApiListUserInvitationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserInvitations(requestParameters: UsersApiListUserInvitationsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListUserInvitations200Response> {
            return localVarFp.listUserInvitations(requestParameters.tilled_account, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Users. The Users are sorted with the most recently created appearing first.
         * @summary List all Users
         * @param {UsersApiListUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(requestParameters: UsersApiListUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListUsers200Response> {
            return localVarFp.listUsers(requestParameters.tilled_account, requestParameters.offset, requestParameters.limit, requestParameters.include_connected_accounts, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a JSON Web Token.
         * @summary Login
         * @param {UsersApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: UsersApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginDto> {
            return localVarFp.login(requestParameters.LoginParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Invalidates a User’s refresh token.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * Generates a new access token with a User\'s refresh token.
         * @summary Refresh an Access Token
         * @param {UsersApiRefreshAccessTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccessToken(requestParameters: UsersApiRefreshAccessTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.refreshAccessToken(requestParameters.AccessTokenRefreshParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a User and simultaneously creates a partner Account. Note: This endpoint should only be used in the Sandbox environment.
         * @summary Register
         * @param {UsersApiRegisterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(requestParameters: UsersApiRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<RegisterDto> {
            return localVarFp.register(requestParameters.RegisterParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Resends an existing User invitation.
         * @summary Resend a User Invitation
         * @param {UsersApiResendUserInvitationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resendUserInvitation(requestParameters: UsersApiResendUserInvitationRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserInvitation> {
            return localVarFp.resendUserInvitation(requestParameters.id, requestParameters.tilled_account, options).then((request) => request(axios, basePath));
        },
        /**
         * Resets a User\'s password. Resetting the password will also invalidate the User\'s refresh token.
         * @summary Reset Password
         * @param {UsersApiResetPasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(requestParameters: UsersApiResetPasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.resetPassword(requestParameters.UserResetPasswordParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a User by setting the values of the provided parameters. Any parameters not provided remain unchanged.
         * @summary Update a User
         * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UsersApiUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.updateUser(requestParameters.tilled_account, requestParameters.id, requestParameters.UserUpdateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkUserInvitation operation in UsersApi.
 * @export
 * @interface UsersApiCheckUserInvitationRequest
 */
export interface UsersApiCheckUserInvitationRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiCheckUserInvitation
     */
    readonly id: string
}

/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export interface UsersApiCreateUserRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiCreateUser
     */
    readonly tilled_account: string

    /**
     * 
     * @type {UserCreateParams}
     * @memberof UsersApiCreateUser
     */
    readonly UserCreateParams: UserCreateParams
}

/**
 * Request parameters for createUserInvitation operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserInvitationRequest
 */
export interface UsersApiCreateUserInvitationRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiCreateUserInvitation
     */
    readonly tilled_account: string

    /**
     * 
     * @type {UserInvitationCreateParams}
     * @memberof UsersApiCreateUserInvitation
     */
    readonly UserInvitationCreateParams: UserInvitationCreateParams
}

/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export interface UsersApiDeleteUserRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly id: string
}

/**
 * Request parameters for deleteUserInvitation operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserInvitationRequest
 */
export interface UsersApiDeleteUserInvitationRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiDeleteUserInvitation
     */
    readonly id: string

    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiDeleteUserInvitation
     */
    readonly tilled_account: string
}

/**
 * Request parameters for forgotPassword operation in UsersApi.
 * @export
 * @interface UsersApiForgotPasswordRequest
 */
export interface UsersApiForgotPasswordRequest {
    /**
     * 
     * @type {ForgotPasswordParams}
     * @memberof UsersApiForgotPassword
     */
    readonly ForgotPasswordParams: ForgotPasswordParams
}

/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiGetUser
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUser
     */
    readonly id: string
}

/**
 * Request parameters for getUserInvitation operation in UsersApi.
 * @export
 * @interface UsersApiGetUserInvitationRequest
 */
export interface UsersApiGetUserInvitationRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiGetUserInvitation
     */
    readonly id: string

    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiGetUserInvitation
     */
    readonly tilled_account: string
}

/**
 * Request parameters for listUserInvitations operation in UsersApi.
 * @export
 * @interface UsersApiListUserInvitationsRequest
 */
export interface UsersApiListUserInvitationsRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiListUserInvitations
     */
    readonly tilled_account: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof UsersApiListUserInvitations
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof UsersApiListUserInvitations
     */
    readonly limit?: number
}

/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export interface UsersApiListUsersRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiListUsers
     */
    readonly tilled_account: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly limit?: number

    /**
     * Whether or not to include the results from any connected accounts.
     * @type {boolean}
     * @memberof UsersApiListUsers
     */
    readonly include_connected_accounts?: boolean
}

/**
 * Request parameters for login operation in UsersApi.
 * @export
 * @interface UsersApiLoginRequest
 */
export interface UsersApiLoginRequest {
    /**
     * 
     * @type {LoginParams}
     * @memberof UsersApiLogin
     */
    readonly LoginParams: LoginParams
}

/**
 * Request parameters for refreshAccessToken operation in UsersApi.
 * @export
 * @interface UsersApiRefreshAccessTokenRequest
 */
export interface UsersApiRefreshAccessTokenRequest {
    /**
     * 
     * @type {AccessTokenRefreshParams}
     * @memberof UsersApiRefreshAccessToken
     */
    readonly AccessTokenRefreshParams: AccessTokenRefreshParams
}

/**
 * Request parameters for register operation in UsersApi.
 * @export
 * @interface UsersApiRegisterRequest
 */
export interface UsersApiRegisterRequest {
    /**
     * 
     * @type {RegisterParams}
     * @memberof UsersApiRegister
     */
    readonly RegisterParams: RegisterParams
}

/**
 * Request parameters for resendUserInvitation operation in UsersApi.
 * @export
 * @interface UsersApiResendUserInvitationRequest
 */
export interface UsersApiResendUserInvitationRequest {
    /**
     * 
     * @type {string}
     * @memberof UsersApiResendUserInvitation
     */
    readonly id: string

    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiResendUserInvitation
     */
    readonly tilled_account: string
}

/**
 * Request parameters for resetPassword operation in UsersApi.
 * @export
 * @interface UsersApiResetPasswordRequest
 */
export interface UsersApiResetPasswordRequest {
    /**
     * 
     * @type {UserResetPasswordParams}
     * @memberof UsersApiResetPassword
     */
    readonly UserResetPasswordParams: UserResetPasswordParams
}

/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly id: string

    /**
     * 
     * @type {UserUpdateParams}
     * @memberof UsersApiUpdateUser
     */
    readonly UserUpdateParams: UserUpdateParams
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Checks for an existing User invitation.
     * @summary Check a User Invitation
     * @param {UsersApiCheckUserInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public checkUserInvitation(requestParameters: UsersApiCheckUserInvitationRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).checkUserInvitation(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User. Note: While the `Create User` endpoint has been un-deprecated for use cases requiring seamless authentication, we strongly encourage developers to utilize [User Invitations](https://docs.tilled.com/api-reference#tag/users/POST/v1/user-invitations) for a more secure and user-friendly experience. User Invitations ensure email verification and allow users to set their own credentials, aligning with best practices for account management.
     * @summary Create a User
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(requestParameters: UsersApiCreateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUser(requestParameters.tilled_account, requestParameters.UserCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User invitation. Upon creation, an invitation email is sent to the User’s email address. Once the User registers for an Account, the invitation is deleted.
     * @summary Create a User Invitation
     * @param {UsersApiCreateUserInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUserInvitation(requestParameters: UsersApiCreateUserInvitationRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUserInvitation(requestParameters.tilled_account, requestParameters.UserInvitationCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a User from a specific Account. If this is the User\'s only Account, the User is permanently deleted. This cannot be undone.
     * @summary Delete a User
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUser(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a User invitation. This cannot be undone.
     * @summary Delete a User Invitation
     * @param {UsersApiDeleteUserInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUserInvitation(requestParameters: UsersApiDeleteUserInvitationRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUserInvitation(requestParameters.id, requestParameters.tilled_account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requests a temporary link be sent to the provided email address, allowing the User to reset their password.
     * @summary Forgot Password
     * @param {UsersApiForgotPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public forgotPassword(requestParameters: UsersApiForgotPasswordRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).forgotPassword(requestParameters.ForgotPasswordParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing User.
     * @summary Get a User
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(requestParameters: UsersApiGetUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUser(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing User invitation.
     * @summary Get a User Invitation
     * @param {UsersApiGetUserInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserInvitation(requestParameters: UsersApiGetUserInvitationRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserInvitation(requestParameters.id, requestParameters.tilled_account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of User invitations. The User invitations are sorted with the most recently created appearing first.
     * @summary List all User Invitations
     * @param {UsersApiListUserInvitationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserInvitations(requestParameters: UsersApiListUserInvitationsRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUserInvitations(requestParameters.tilled_account, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Users. The Users are sorted with the most recently created appearing first.
     * @summary List all Users
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(requestParameters: UsersApiListUsersRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).listUsers(requestParameters.tilled_account, requestParameters.offset, requestParameters.limit, requestParameters.include_connected_accounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a JSON Web Token.
     * @summary Login
     * @param {UsersApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public login(requestParameters: UsersApiLoginRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).login(requestParameters.LoginParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Invalidates a User’s refresh token.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public logout(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates a new access token with a User\'s refresh token.
     * @summary Refresh an Access Token
     * @param {UsersApiRefreshAccessTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public refreshAccessToken(requestParameters: UsersApiRefreshAccessTokenRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).refreshAccessToken(requestParameters.AccessTokenRefreshParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a User and simultaneously creates a partner Account. Note: This endpoint should only be used in the Sandbox environment.
     * @summary Register
     * @param {UsersApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public register(requestParameters: UsersApiRegisterRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).register(requestParameters.RegisterParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resends an existing User invitation.
     * @summary Resend a User Invitation
     * @param {UsersApiResendUserInvitationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public resendUserInvitation(requestParameters: UsersApiResendUserInvitationRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).resendUserInvitation(requestParameters.id, requestParameters.tilled_account, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resets a User\'s password. Resetting the password will also invalidate the User\'s refresh token.
     * @summary Reset Password
     * @param {UsersApiResetPasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public resetPassword(requestParameters: UsersApiResetPasswordRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).resetPassword(requestParameters.UserResetPasswordParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a User by setting the values of the provided parameters. Any parameters not provided remain unchanged.
     * @summary Update a User
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUser(requestParameters.tilled_account, requestParameters.id, requestParameters.UserUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }
}

