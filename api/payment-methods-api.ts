/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AchDebitSingleUseToken } from '../model';
// @ts-ignore
import { ListPaymentMethods200Response } from '../model';
// @ts-ignore
import { PaymentMethod } from '../model';
// @ts-ignore
import { PaymentMethodAttachParams } from '../model';
// @ts-ignore
import { PaymentMethodCreateAchDebitSingleUseTokenParams } from '../model';
// @ts-ignore
import { PaymentMethodCreateParams } from '../model';
// @ts-ignore
import { PaymentMethodUpdateParams } from '../model';
/**
 * PaymentMethodsApi - axios parameter creator
 * @export
 */
export const PaymentMethodsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Attaches a Payment Method to a Customer, converting it from single-use to reusable. Before attaching a `card_present` Payment Method to a Customer, the Payment Method must have been successfully used on a Terminal Reader.  Payment Methods expire 15 minutes after creation. After 15 minutes, the Payment Method can no longer be attached to a Customer.
         * @summary Attach a Payment Method to a Customer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentMethodAttachParams} PaymentMethodAttachParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachPaymentMethodToCustomer: async (tilled_account: string, id: string, PaymentMethodAttachParams: PaymentMethodAttachParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('attachPaymentMethodToCustomer', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('attachPaymentMethodToCustomer', 'id', id)
            // verify required parameter 'PaymentMethodAttachParams' is not null or undefined
            assertParamExists('attachPaymentMethodToCustomer', 'PaymentMethodAttachParams', PaymentMethodAttachParams)
            const localVarPath = `/v1/payment-methods/{id}/attach`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentMethodAttachParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a single-use token for ACH debit which is used to create a Payment Method.
         * @summary Create an ACH Debit Single-Use Token
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {PaymentMethodCreateAchDebitSingleUseTokenParams} PaymentMethodCreateAchDebitSingleUseTokenParams 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createAchDebitSingleUseToken: async (tilled_account: string, PaymentMethodCreateAchDebitSingleUseTokenParams: PaymentMethodCreateAchDebitSingleUseTokenParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createAchDebitSingleUseToken', 'tilled_account', tilled_account)
            // verify required parameter 'PaymentMethodCreateAchDebitSingleUseTokenParams' is not null or undefined
            assertParamExists('createAchDebitSingleUseToken', 'PaymentMethodCreateAchDebitSingleUseTokenParams', PaymentMethodCreateAchDebitSingleUseTokenParams)
            const localVarPath = `/v1/payment-methods/ach-debit-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentMethodCreateAchDebitSingleUseTokenParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Payment Method. To use this endpoint, you must first submit your PCI Attestation of Compliance (AOC). Please contact integrations@tilled.com for information on how to submit your documentation.
         * @summary Create a Payment Method
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {PaymentMethodCreateParams} PaymentMethodCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentMethod: async (tilled_account: string, PaymentMethodCreateParams: PaymentMethodCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createPaymentMethod', 'tilled_account', tilled_account)
            // verify required parameter 'PaymentMethodCreateParams' is not null or undefined
            assertParamExists('createPaymentMethod', 'PaymentMethodCreateParams', PaymentMethodCreateParams)
            const localVarPath = `/v1/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentMethodCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Detaches a Payment Method from a Customer. Once detached, the Payment Method can no longer be used to confirm a Payment Intent.
         * @summary Detach a Payment Method from a Customer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachPaymentMethodFromCustomer: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('detachPaymentMethodFromCustomer', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('detachPaymentMethodFromCustomer', 'id', id)
            const localVarPath = `/v1/payment-methods/{id}/detach`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing Payment Method.
         * @summary Get a Payment Method
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getPaymentMethod', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPaymentMethod', 'id', id)
            const localVarPath = `/v1/payment-methods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Payment Methods for a given Customer. The Payment Methods are sorted with the most recently created appearing first.
         * @summary List a Customer\'s Payment Methods
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {'card' | 'ach_debit' | 'eft_debit' | 'card_present'} type Only return payment methods of the given type.
         * @param {string} customer_id Customer identifier
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentMethods: async (tilled_account: string, type: 'card' | 'ach_debit' | 'eft_debit' | 'card_present', customer_id: string, metadata?: { [key: string]: string; }, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listPaymentMethods', 'tilled_account', tilled_account)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('listPaymentMethods', 'type', type)
            // verify required parameter 'customer_id' is not null or undefined
            assertParamExists('listPaymentMethods', 'customer_id', customer_id)
            const localVarPath = `/v1/payment-methods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (metadata !== undefined) {
                localVarQueryParameter['metadata'] = metadata;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (customer_id !== undefined) {
                localVarQueryParameter['customer_id'] = customer_id;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Payment Method by setting the values of the provided parameters. Any parameters not provided will be left unchanged. The Payment Method must be attached to a Customer to be updated.
         * @summary Update a Payment Method
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentMethodUpdateParams} PaymentMethodUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentMethod: async (tilled_account: string, id: string, PaymentMethodUpdateParams: PaymentMethodUpdateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('updatePaymentMethod', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePaymentMethod', 'id', id)
            // verify required parameter 'PaymentMethodUpdateParams' is not null or undefined
            assertParamExists('updatePaymentMethod', 'PaymentMethodUpdateParams', PaymentMethodUpdateParams)
            const localVarPath = `/v1/payment-methods/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PaymentMethodUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentMethodsApi - functional programming interface
 * @export
 */
export const PaymentMethodsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentMethodsApiAxiosParamCreator(configuration)
    return {
        /**
         * Attaches a Payment Method to a Customer, converting it from single-use to reusable. Before attaching a `card_present` Payment Method to a Customer, the Payment Method must have been successfully used on a Terminal Reader.  Payment Methods expire 15 minutes after creation. After 15 minutes, the Payment Method can no longer be attached to a Customer.
         * @summary Attach a Payment Method to a Customer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentMethodAttachParams} PaymentMethodAttachParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachPaymentMethodToCustomer(tilled_account: string, id: string, PaymentMethodAttachParams: PaymentMethodAttachParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachPaymentMethodToCustomer(tilled_account, id, PaymentMethodAttachParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a single-use token for ACH debit which is used to create a Payment Method.
         * @summary Create an ACH Debit Single-Use Token
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {PaymentMethodCreateAchDebitSingleUseTokenParams} PaymentMethodCreateAchDebitSingleUseTokenParams 
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async createAchDebitSingleUseToken(tilled_account: string, PaymentMethodCreateAchDebitSingleUseTokenParams: PaymentMethodCreateAchDebitSingleUseTokenParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AchDebitSingleUseToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAchDebitSingleUseToken(tilled_account, PaymentMethodCreateAchDebitSingleUseTokenParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Payment Method. To use this endpoint, you must first submit your PCI Attestation of Compliance (AOC). Please contact integrations@tilled.com for information on how to submit your documentation.
         * @summary Create a Payment Method
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {PaymentMethodCreateParams} PaymentMethodCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPaymentMethod(tilled_account: string, PaymentMethodCreateParams: PaymentMethodCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPaymentMethod(tilled_account, PaymentMethodCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Detaches a Payment Method from a Customer. Once detached, the Payment Method can no longer be used to confirm a Payment Intent.
         * @summary Detach a Payment Method from a Customer
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detachPaymentMethodFromCustomer(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detachPaymentMethodFromCustomer(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing Payment Method.
         * @summary Get a Payment Method
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethod(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethod(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Payment Methods for a given Customer. The Payment Methods are sorted with the most recently created appearing first.
         * @summary List a Customer\'s Payment Methods
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {'card' | 'ach_debit' | 'eft_debit' | 'card_present'} type Only return payment methods of the given type.
         * @param {string} customer_id Customer identifier
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPaymentMethods(tilled_account: string, type: 'card' | 'ach_debit' | 'eft_debit' | 'card_present', customer_id: string, metadata?: { [key: string]: string; }, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPaymentMethods200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPaymentMethods(tilled_account, type, customer_id, metadata, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a Payment Method by setting the values of the provided parameters. Any parameters not provided will be left unchanged. The Payment Method must be attached to a Customer to be updated.
         * @summary Update a Payment Method
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {PaymentMethodUpdateParams} PaymentMethodUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentMethod(tilled_account: string, id: string, PaymentMethodUpdateParams: PaymentMethodUpdateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaymentMethod(tilled_account, id, PaymentMethodUpdateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentMethodsApi - factory interface
 * @export
 */
export const PaymentMethodsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentMethodsApiFp(configuration)
    return {
        /**
         * Attaches a Payment Method to a Customer, converting it from single-use to reusable. Before attaching a `card_present` Payment Method to a Customer, the Payment Method must have been successfully used on a Terminal Reader.  Payment Methods expire 15 minutes after creation. After 15 minutes, the Payment Method can no longer be attached to a Customer.
         * @summary Attach a Payment Method to a Customer
         * @param {PaymentMethodsApiAttachPaymentMethodToCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachPaymentMethodToCustomer(requestParameters: PaymentMethodsApiAttachPaymentMethodToCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.attachPaymentMethodToCustomer(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentMethodAttachParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a single-use token for ACH debit which is used to create a Payment Method.
         * @summary Create an ACH Debit Single-Use Token
         * @param {PaymentMethodsApiCreateAchDebitSingleUseTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createAchDebitSingleUseToken(requestParameters: PaymentMethodsApiCreateAchDebitSingleUseTokenRequest, options?: AxiosRequestConfig): AxiosPromise<AchDebitSingleUseToken> {
            return localVarFp.createAchDebitSingleUseToken(requestParameters.tilled_account, requestParameters.PaymentMethodCreateAchDebitSingleUseTokenParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Payment Method. To use this endpoint, you must first submit your PCI Attestation of Compliance (AOC). Please contact integrations@tilled.com for information on how to submit your documentation.
         * @summary Create a Payment Method
         * @param {PaymentMethodsApiCreatePaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPaymentMethod(requestParameters: PaymentMethodsApiCreatePaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.createPaymentMethod(requestParameters.tilled_account, requestParameters.PaymentMethodCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Detaches a Payment Method from a Customer. Once detached, the Payment Method can no longer be used to confirm a Payment Intent.
         * @summary Detach a Payment Method from a Customer
         * @param {PaymentMethodsApiDetachPaymentMethodFromCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detachPaymentMethodFromCustomer(requestParameters: PaymentMethodsApiDetachPaymentMethodFromCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.detachPaymentMethodFromCustomer(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing Payment Method.
         * @summary Get a Payment Method
         * @param {PaymentMethodsApiGetPaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethod(requestParameters: PaymentMethodsApiGetPaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.getPaymentMethod(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Payment Methods for a given Customer. The Payment Methods are sorted with the most recently created appearing first.
         * @summary List a Customer\'s Payment Methods
         * @param {PaymentMethodsApiListPaymentMethodsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPaymentMethods(requestParameters: PaymentMethodsApiListPaymentMethodsRequest, options?: AxiosRequestConfig): AxiosPromise<ListPaymentMethods200Response> {
            return localVarFp.listPaymentMethods(requestParameters.tilled_account, requestParameters.type, requestParameters.customer_id, requestParameters.metadata, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Payment Method by setting the values of the provided parameters. Any parameters not provided will be left unchanged. The Payment Method must be attached to a Customer to be updated.
         * @summary Update a Payment Method
         * @param {PaymentMethodsApiUpdatePaymentMethodRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentMethod(requestParameters: PaymentMethodsApiUpdatePaymentMethodRequest, options?: AxiosRequestConfig): AxiosPromise<PaymentMethod> {
            return localVarFp.updatePaymentMethod(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentMethodUpdateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for attachPaymentMethodToCustomer operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiAttachPaymentMethodToCustomerRequest
 */
export interface PaymentMethodsApiAttachPaymentMethodToCustomerRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentMethodsApiAttachPaymentMethodToCustomer
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentMethodsApiAttachPaymentMethodToCustomer
     */
    readonly id: string

    /**
     * 
     * @type {PaymentMethodAttachParams}
     * @memberof PaymentMethodsApiAttachPaymentMethodToCustomer
     */
    readonly PaymentMethodAttachParams: PaymentMethodAttachParams
}

/**
 * Request parameters for createAchDebitSingleUseToken operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiCreateAchDebitSingleUseTokenRequest
 */
export interface PaymentMethodsApiCreateAchDebitSingleUseTokenRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentMethodsApiCreateAchDebitSingleUseToken
     */
    readonly tilled_account: string

    /**
     * 
     * @type {PaymentMethodCreateAchDebitSingleUseTokenParams}
     * @memberof PaymentMethodsApiCreateAchDebitSingleUseToken
     */
    readonly PaymentMethodCreateAchDebitSingleUseTokenParams: PaymentMethodCreateAchDebitSingleUseTokenParams
}

/**
 * Request parameters for createPaymentMethod operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiCreatePaymentMethodRequest
 */
export interface PaymentMethodsApiCreatePaymentMethodRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentMethodsApiCreatePaymentMethod
     */
    readonly tilled_account: string

    /**
     * 
     * @type {PaymentMethodCreateParams}
     * @memberof PaymentMethodsApiCreatePaymentMethod
     */
    readonly PaymentMethodCreateParams: PaymentMethodCreateParams
}

/**
 * Request parameters for detachPaymentMethodFromCustomer operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiDetachPaymentMethodFromCustomerRequest
 */
export interface PaymentMethodsApiDetachPaymentMethodFromCustomerRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentMethodsApiDetachPaymentMethodFromCustomer
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentMethodsApiDetachPaymentMethodFromCustomer
     */
    readonly id: string
}

/**
 * Request parameters for getPaymentMethod operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiGetPaymentMethodRequest
 */
export interface PaymentMethodsApiGetPaymentMethodRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentMethodsApiGetPaymentMethod
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentMethodsApiGetPaymentMethod
     */
    readonly id: string
}

/**
 * Request parameters for listPaymentMethods operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiListPaymentMethodsRequest
 */
export interface PaymentMethodsApiListPaymentMethodsRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentMethodsApiListPaymentMethods
     */
    readonly tilled_account: string

    /**
     * Only return payment methods of the given type.
     * @type {'card' | 'ach_debit' | 'eft_debit' | 'card_present'}
     * @memberof PaymentMethodsApiListPaymentMethods
     */
    readonly type: 'card' | 'ach_debit' | 'eft_debit' | 'card_present'

    /**
     * Customer identifier
     * @type {string}
     * @memberof PaymentMethodsApiListPaymentMethods
     */
    readonly customer_id: string

    /**
     * &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
     * @type {{ [key: string]: string; }}
     * @memberof PaymentMethodsApiListPaymentMethods
     */
    readonly metadata?: { [key: string]: string; }

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof PaymentMethodsApiListPaymentMethods
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof PaymentMethodsApiListPaymentMethods
     */
    readonly limit?: number
}

/**
 * Request parameters for updatePaymentMethod operation in PaymentMethodsApi.
 * @export
 * @interface PaymentMethodsApiUpdatePaymentMethodRequest
 */
export interface PaymentMethodsApiUpdatePaymentMethodRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof PaymentMethodsApiUpdatePaymentMethod
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof PaymentMethodsApiUpdatePaymentMethod
     */
    readonly id: string

    /**
     * 
     * @type {PaymentMethodUpdateParams}
     * @memberof PaymentMethodsApiUpdatePaymentMethod
     */
    readonly PaymentMethodUpdateParams: PaymentMethodUpdateParams
}

/**
 * PaymentMethodsApi - object-oriented interface
 * @export
 * @class PaymentMethodsApi
 * @extends {BaseAPI}
 */
export class PaymentMethodsApi extends BaseAPI {
    /**
     * Attaches a Payment Method to a Customer, converting it from single-use to reusable. Before attaching a `card_present` Payment Method to a Customer, the Payment Method must have been successfully used on a Terminal Reader.  Payment Methods expire 15 minutes after creation. After 15 minutes, the Payment Method can no longer be attached to a Customer.
     * @summary Attach a Payment Method to a Customer
     * @param {PaymentMethodsApiAttachPaymentMethodToCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public attachPaymentMethodToCustomer(requestParameters: PaymentMethodsApiAttachPaymentMethodToCustomerRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).attachPaymentMethodToCustomer(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentMethodAttachParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a single-use token for ACH debit which is used to create a Payment Method.
     * @summary Create an ACH Debit Single-Use Token
     * @param {PaymentMethodsApiCreateAchDebitSingleUseTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public createAchDebitSingleUseToken(requestParameters: PaymentMethodsApiCreateAchDebitSingleUseTokenRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).createAchDebitSingleUseToken(requestParameters.tilled_account, requestParameters.PaymentMethodCreateAchDebitSingleUseTokenParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Payment Method. To use this endpoint, you must first submit your PCI Attestation of Compliance (AOC). Please contact integrations@tilled.com for information on how to submit your documentation.
     * @summary Create a Payment Method
     * @param {PaymentMethodsApiCreatePaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public createPaymentMethod(requestParameters: PaymentMethodsApiCreatePaymentMethodRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).createPaymentMethod(requestParameters.tilled_account, requestParameters.PaymentMethodCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Detaches a Payment Method from a Customer. Once detached, the Payment Method can no longer be used to confirm a Payment Intent.
     * @summary Detach a Payment Method from a Customer
     * @param {PaymentMethodsApiDetachPaymentMethodFromCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public detachPaymentMethodFromCustomer(requestParameters: PaymentMethodsApiDetachPaymentMethodFromCustomerRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).detachPaymentMethodFromCustomer(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing Payment Method.
     * @summary Get a Payment Method
     * @param {PaymentMethodsApiGetPaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public getPaymentMethod(requestParameters: PaymentMethodsApiGetPaymentMethodRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).getPaymentMethod(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Payment Methods for a given Customer. The Payment Methods are sorted with the most recently created appearing first.
     * @summary List a Customer\'s Payment Methods
     * @param {PaymentMethodsApiListPaymentMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public listPaymentMethods(requestParameters: PaymentMethodsApiListPaymentMethodsRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).listPaymentMethods(requestParameters.tilled_account, requestParameters.type, requestParameters.customer_id, requestParameters.metadata, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Payment Method by setting the values of the provided parameters. Any parameters not provided will be left unchanged. The Payment Method must be attached to a Customer to be updated.
     * @summary Update a Payment Method
     * @param {PaymentMethodsApiUpdatePaymentMethodRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodsApi
     */
    public updatePaymentMethod(requestParameters: PaymentMethodsApiUpdatePaymentMethodRequest, options?: AxiosRequestConfig) {
        return PaymentMethodsApiFp(this.configuration).updatePaymentMethod(requestParameters.tilled_account, requestParameters.id, requestParameters.PaymentMethodUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }
}
