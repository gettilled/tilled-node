/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiKey } from '../model';
// @ts-ignore
import { ApiKeyCreateParams } from '../model';
// @ts-ignore
import { ApiKeyUpdateParams } from '../model';
// @ts-ignore
import { ListAPIKeys200Response } from '../model';
/**
 * APIKeysApi - axios parameter creator
 * @export
 */
export const APIKeysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new API Key. For security reasons, secret keys are only fully displayed upon creation. Store this key securely to authenticate your application to the API.
         * @summary Create an API key
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {ApiKeyCreateParams} ApiKeyCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAPIKey: async (tilled_account: string, ApiKeyCreateParams: ApiKeyCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createAPIKey', 'tilled_account', tilled_account)
            // verify required parameter 'ApiKeyCreateParams' is not null or undefined
            assertParamExists('createAPIKey', 'ApiKeyCreateParams', ApiKeyCreateParams)
            const localVarPath = `/v1/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ApiKeyCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes an API Key. This cannot be undone.
         * @summary Delete an API Key
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAPIKey: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('deleteAPIKey', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAPIKey', 'id', id)
            const localVarPath = `/v1/api-keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of API Keys. The API Keys are sorted with the most recently created appearing first.
         * @summary List all API Keys
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPIKeys: async (tilled_account: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listAPIKeys', 'tilled_account', tilled_account)
            const localVarPath = `/v1/api-keys`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the API Keys by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update an API key
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {ApiKeyUpdateParams} ApiKeyUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAPIKey: async (tilled_account: string, id: string, ApiKeyUpdateParams: ApiKeyUpdateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('updateAPIKey', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAPIKey', 'id', id)
            // verify required parameter 'ApiKeyUpdateParams' is not null or undefined
            assertParamExists('updateAPIKey', 'ApiKeyUpdateParams', ApiKeyUpdateParams)
            const localVarPath = `/v1/api-keys/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ApiKeyUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * APIKeysApi - functional programming interface
 * @export
 */
export const APIKeysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = APIKeysApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new API Key. For security reasons, secret keys are only fully displayed upon creation. Store this key securely to authenticate your application to the API.
         * @summary Create an API key
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {ApiKeyCreateParams} ApiKeyCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAPIKey(tilled_account: string, ApiKeyCreateParams: ApiKeyCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAPIKey(tilled_account, ApiKeyCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes an API Key. This cannot be undone.
         * @summary Delete an API Key
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAPIKey(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAPIKey(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of API Keys. The API Keys are sorted with the most recently created appearing first.
         * @summary List all API Keys
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAPIKeys(tilled_account: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAPIKeys200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAPIKeys(tilled_account, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the API Keys by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update an API key
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {ApiKeyUpdateParams} ApiKeyUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAPIKey(tilled_account: string, id: string, ApiKeyUpdateParams: ApiKeyUpdateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiKey>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAPIKey(tilled_account, id, ApiKeyUpdateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * APIKeysApi - factory interface
 * @export
 */
export const APIKeysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = APIKeysApiFp(configuration)
    return {
        /**
         * Creates a new API Key. For security reasons, secret keys are only fully displayed upon creation. Store this key securely to authenticate your application to the API.
         * @summary Create an API key
         * @param {APIKeysApiCreateAPIKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAPIKey(requestParameters: APIKeysApiCreateAPIKeyRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKey> {
            return localVarFp.createAPIKey(requestParameters.tilled_account, requestParameters.ApiKeyCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes an API Key. This cannot be undone.
         * @summary Delete an API Key
         * @param {APIKeysApiDeleteAPIKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAPIKey(requestParameters: APIKeysApiDeleteAPIKeyRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteAPIKey(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of API Keys. The API Keys are sorted with the most recently created appearing first.
         * @summary List all API Keys
         * @param {APIKeysApiListAPIKeysRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAPIKeys(requestParameters: APIKeysApiListAPIKeysRequest, options?: AxiosRequestConfig): AxiosPromise<ListAPIKeys200Response> {
            return localVarFp.listAPIKeys(requestParameters.tilled_account, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the API Keys by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update an API key
         * @param {APIKeysApiUpdateAPIKeyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAPIKey(requestParameters: APIKeysApiUpdateAPIKeyRequest, options?: AxiosRequestConfig): AxiosPromise<ApiKey> {
            return localVarFp.updateAPIKey(requestParameters.tilled_account, requestParameters.id, requestParameters.ApiKeyUpdateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAPIKey operation in APIKeysApi.
 * @export
 * @interface APIKeysApiCreateAPIKeyRequest
 */
export interface APIKeysApiCreateAPIKeyRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof APIKeysApiCreateAPIKey
     */
    readonly tilled_account: string

    /**
     * 
     * @type {ApiKeyCreateParams}
     * @memberof APIKeysApiCreateAPIKey
     */
    readonly ApiKeyCreateParams: ApiKeyCreateParams
}

/**
 * Request parameters for deleteAPIKey operation in APIKeysApi.
 * @export
 * @interface APIKeysApiDeleteAPIKeyRequest
 */
export interface APIKeysApiDeleteAPIKeyRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof APIKeysApiDeleteAPIKey
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof APIKeysApiDeleteAPIKey
     */
    readonly id: string
}

/**
 * Request parameters for listAPIKeys operation in APIKeysApi.
 * @export
 * @interface APIKeysApiListAPIKeysRequest
 */
export interface APIKeysApiListAPIKeysRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof APIKeysApiListAPIKeys
     */
    readonly tilled_account: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof APIKeysApiListAPIKeys
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof APIKeysApiListAPIKeys
     */
    readonly limit?: number
}

/**
 * Request parameters for updateAPIKey operation in APIKeysApi.
 * @export
 * @interface APIKeysApiUpdateAPIKeyRequest
 */
export interface APIKeysApiUpdateAPIKeyRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof APIKeysApiUpdateAPIKey
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof APIKeysApiUpdateAPIKey
     */
    readonly id: string

    /**
     * 
     * @type {ApiKeyUpdateParams}
     * @memberof APIKeysApiUpdateAPIKey
     */
    readonly ApiKeyUpdateParams: ApiKeyUpdateParams
}

/**
 * APIKeysApi - object-oriented interface
 * @export
 * @class APIKeysApi
 * @extends {BaseAPI}
 */
export class APIKeysApi extends BaseAPI {
    /**
     * Creates a new API Key. For security reasons, secret keys are only fully displayed upon creation. Store this key securely to authenticate your application to the API.
     * @summary Create an API key
     * @param {APIKeysApiCreateAPIKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    public createAPIKey(requestParameters: APIKeysApiCreateAPIKeyRequest, options?: AxiosRequestConfig) {
        return APIKeysApiFp(this.configuration).createAPIKey(requestParameters.tilled_account, requestParameters.ApiKeyCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes an API Key. This cannot be undone.
     * @summary Delete an API Key
     * @param {APIKeysApiDeleteAPIKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    public deleteAPIKey(requestParameters: APIKeysApiDeleteAPIKeyRequest, options?: AxiosRequestConfig) {
        return APIKeysApiFp(this.configuration).deleteAPIKey(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of API Keys. The API Keys are sorted with the most recently created appearing first.
     * @summary List all API Keys
     * @param {APIKeysApiListAPIKeysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    public listAPIKeys(requestParameters: APIKeysApiListAPIKeysRequest, options?: AxiosRequestConfig) {
        return APIKeysApiFp(this.configuration).listAPIKeys(requestParameters.tilled_account, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the API Keys by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
     * @summary Update an API key
     * @param {APIKeysApiUpdateAPIKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof APIKeysApi
     */
    public updateAPIKey(requestParameters: APIKeysApiUpdateAPIKeyRequest, options?: AxiosRequestConfig) {
        return APIKeysApiFp(this.configuration).updateAPIKey(requestParameters.tilled_account, requestParameters.id, requestParameters.ApiKeyUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }
}
