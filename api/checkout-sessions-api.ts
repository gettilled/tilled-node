/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckoutSession } from '../model';
// @ts-ignore
import { CheckoutSessionCreateParams } from '../model';
// @ts-ignore
import { ListCheckoutSessions200Response } from '../model';
/**
 * CheckoutSessionsApi - axios parameter creator
 * @export
 */
export const CheckoutSessionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Checkout Session.
         * @summary Create a Checkout Session
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {CheckoutSessionCreateParams} CheckoutSessionCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession: async (tilled_account: string, CheckoutSessionCreateParams: CheckoutSessionCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createCheckoutSession', 'tilled_account', tilled_account)
            // verify required parameter 'CheckoutSessionCreateParams' is not null or undefined
            assertParamExists('createCheckoutSession', 'CheckoutSessionCreateParams', CheckoutSessionCreateParams)
            const localVarPath = `/v1/checkout-sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CheckoutSessionCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Expires a Checkout Session. A Checkout Session can only be expired if its status is `open`. Once expired, the customer cannot complete the Checkout Session and will see a message about the expiration.
         * @summary Expire a Checkout Session
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireCheckoutSession: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('expireCheckoutSession', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('expireCheckoutSession', 'id', id)
            const localVarPath = `/v1/checkout-sessions/{id}/expire`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing Checkout Session.
         * @summary Get a Checkout Session
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckoutSession: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getCheckoutSession', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCheckoutSession', 'id', id)
            const localVarPath = `/v1/checkout-sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Checkout Sessions. The Checkout Sessions are sorted with the most recently created Checkout Session appearing first.
         * @summary List all Checkout Sessions
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {string} [payment_intent_id] Only return the checkout session for the payment intent specified.
         * @param {string} [customer_id] Only return the checkout session for the customer specified.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCheckoutSessions: async (tilled_account: string, metadata?: { [key: string]: string; }, payment_intent_id?: string, customer_id?: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listCheckoutSessions', 'tilled_account', tilled_account)
            const localVarPath = `/v1/checkout-sessions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (metadata !== undefined) {
                localVarQueryParameter['metadata'] = metadata;
            }

            if (payment_intent_id !== undefined) {
                localVarQueryParameter['payment_intent_id'] = payment_intent_id;
            }

            if (customer_id !== undefined) {
                localVarQueryParameter['customer_id'] = customer_id;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutSessionsApi - functional programming interface
 * @export
 */
export const CheckoutSessionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutSessionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Checkout Session.
         * @summary Create a Checkout Session
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {CheckoutSessionCreateParams} CheckoutSessionCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCheckoutSession(tilled_account: string, CheckoutSessionCreateParams: CheckoutSessionCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCheckoutSession(tilled_account, CheckoutSessionCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Expires a Checkout Session. A Checkout Session can only be expired if its status is `open`. Once expired, the customer cannot complete the Checkout Session and will see a message about the expiration.
         * @summary Expire a Checkout Session
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expireCheckoutSession(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expireCheckoutSession(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing Checkout Session.
         * @summary Get a Checkout Session
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCheckoutSession(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCheckoutSession(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Checkout Sessions. The Checkout Sessions are sorted with the most recently created Checkout Session appearing first.
         * @summary List all Checkout Sessions
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {{ [key: string]: string; }} [metadata] &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
         * @param {string} [payment_intent_id] Only return the checkout session for the payment intent specified.
         * @param {string} [customer_id] Only return the checkout session for the customer specified.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCheckoutSessions(tilled_account: string, metadata?: { [key: string]: string; }, payment_intent_id?: string, customer_id?: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCheckoutSessions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCheckoutSessions(tilled_account, metadata, payment_intent_id, customer_id, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckoutSessionsApi - factory interface
 * @export
 */
export const CheckoutSessionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutSessionsApiFp(configuration)
    return {
        /**
         * Creates a Checkout Session.
         * @summary Create a Checkout Session
         * @param {CheckoutSessionsApiCreateCheckoutSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCheckoutSession(requestParameters: CheckoutSessionsApiCreateCheckoutSessionRequest, options?: AxiosRequestConfig): AxiosPromise<CheckoutSession> {
            return localVarFp.createCheckoutSession(requestParameters.tilled_account, requestParameters.CheckoutSessionCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Expires a Checkout Session. A Checkout Session can only be expired if its status is `open`. Once expired, the customer cannot complete the Checkout Session and will see a message about the expiration.
         * @summary Expire a Checkout Session
         * @param {CheckoutSessionsApiExpireCheckoutSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expireCheckoutSession(requestParameters: CheckoutSessionsApiExpireCheckoutSessionRequest, options?: AxiosRequestConfig): AxiosPromise<CheckoutSession> {
            return localVarFp.expireCheckoutSession(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing Checkout Session.
         * @summary Get a Checkout Session
         * @param {CheckoutSessionsApiGetCheckoutSessionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCheckoutSession(requestParameters: CheckoutSessionsApiGetCheckoutSessionRequest, options?: AxiosRequestConfig): AxiosPromise<CheckoutSession> {
            return localVarFp.getCheckoutSession(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Checkout Sessions. The Checkout Sessions are sorted with the most recently created Checkout Session appearing first.
         * @summary List all Checkout Sessions
         * @param {CheckoutSessionsApiListCheckoutSessionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCheckoutSessions(requestParameters: CheckoutSessionsApiListCheckoutSessionsRequest, options?: AxiosRequestConfig): AxiosPromise<ListCheckoutSessions200Response> {
            return localVarFp.listCheckoutSessions(requestParameters.tilled_account, requestParameters.metadata, requestParameters.payment_intent_id, requestParameters.customer_id, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCheckoutSession operation in CheckoutSessionsApi.
 * @export
 * @interface CheckoutSessionsApiCreateCheckoutSessionRequest
 */
export interface CheckoutSessionsApiCreateCheckoutSessionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof CheckoutSessionsApiCreateCheckoutSession
     */
    readonly tilled_account: string

    /**
     * 
     * @type {CheckoutSessionCreateParams}
     * @memberof CheckoutSessionsApiCreateCheckoutSession
     */
    readonly CheckoutSessionCreateParams: CheckoutSessionCreateParams
}

/**
 * Request parameters for expireCheckoutSession operation in CheckoutSessionsApi.
 * @export
 * @interface CheckoutSessionsApiExpireCheckoutSessionRequest
 */
export interface CheckoutSessionsApiExpireCheckoutSessionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof CheckoutSessionsApiExpireCheckoutSession
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof CheckoutSessionsApiExpireCheckoutSession
     */
    readonly id: string
}

/**
 * Request parameters for getCheckoutSession operation in CheckoutSessionsApi.
 * @export
 * @interface CheckoutSessionsApiGetCheckoutSessionRequest
 */
export interface CheckoutSessionsApiGetCheckoutSessionRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof CheckoutSessionsApiGetCheckoutSession
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof CheckoutSessionsApiGetCheckoutSession
     */
    readonly id: string
}

/**
 * Request parameters for listCheckoutSessions operation in CheckoutSessionsApi.
 * @export
 * @interface CheckoutSessionsApiListCheckoutSessionsRequest
 */
export interface CheckoutSessionsApiListCheckoutSessionsRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof CheckoutSessionsApiListCheckoutSessions
     */
    readonly tilled_account: string

    /**
     * &#x60;metadata&#x60; key-value pairs to filter by. Only exact matches on the key-value pair(s) will be returned. Example: &#x60;?metadata[internal_customer_id]&#x3D;7cb1159d-875e-47ae-a309-319fa7ff395b&#x60;.
     * @type {{ [key: string]: string; }}
     * @memberof CheckoutSessionsApiListCheckoutSessions
     */
    readonly metadata?: { [key: string]: string; }

    /**
     * Only return the checkout session for the payment intent specified.
     * @type {string}
     * @memberof CheckoutSessionsApiListCheckoutSessions
     */
    readonly payment_intent_id?: string

    /**
     * Only return the checkout session for the customer specified.
     * @type {string}
     * @memberof CheckoutSessionsApiListCheckoutSessions
     */
    readonly customer_id?: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof CheckoutSessionsApiListCheckoutSessions
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof CheckoutSessionsApiListCheckoutSessions
     */
    readonly limit?: number
}

/**
 * CheckoutSessionsApi - object-oriented interface
 * @export
 * @class CheckoutSessionsApi
 * @extends {BaseAPI}
 */
export class CheckoutSessionsApi extends BaseAPI {
    /**
     * Creates a Checkout Session.
     * @summary Create a Checkout Session
     * @param {CheckoutSessionsApiCreateCheckoutSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    public createCheckoutSession(requestParameters: CheckoutSessionsApiCreateCheckoutSessionRequest, options?: AxiosRequestConfig) {
        return CheckoutSessionsApiFp(this.configuration).createCheckoutSession(requestParameters.tilled_account, requestParameters.CheckoutSessionCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Expires a Checkout Session. A Checkout Session can only be expired if its status is `open`. Once expired, the customer cannot complete the Checkout Session and will see a message about the expiration.
     * @summary Expire a Checkout Session
     * @param {CheckoutSessionsApiExpireCheckoutSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    public expireCheckoutSession(requestParameters: CheckoutSessionsApiExpireCheckoutSessionRequest, options?: AxiosRequestConfig) {
        return CheckoutSessionsApiFp(this.configuration).expireCheckoutSession(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing Checkout Session.
     * @summary Get a Checkout Session
     * @param {CheckoutSessionsApiGetCheckoutSessionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    public getCheckoutSession(requestParameters: CheckoutSessionsApiGetCheckoutSessionRequest, options?: AxiosRequestConfig) {
        return CheckoutSessionsApiFp(this.configuration).getCheckoutSession(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Checkout Sessions. The Checkout Sessions are sorted with the most recently created Checkout Session appearing first.
     * @summary List all Checkout Sessions
     * @param {CheckoutSessionsApiListCheckoutSessionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutSessionsApi
     */
    public listCheckoutSessions(requestParameters: CheckoutSessionsApiListCheckoutSessionsRequest, options?: AxiosRequestConfig) {
        return CheckoutSessionsApiFp(this.configuration).listCheckoutSessions(requestParameters.tilled_account, requestParameters.metadata, requestParameters.payment_intent_id, requestParameters.customer_id, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}
