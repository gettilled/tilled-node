/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListWebhookEndpoints200Response } from '../model';
// @ts-ignore
import { WebhookEndpoint } from '../model';
// @ts-ignore
import { WebhookEndpointCreateParams } from '../model';
// @ts-ignore
import { WebhookEndpointUpdateParams } from '../model';
/**
 * WebhookEndpointsApi - axios parameter creator
 * @export
 */
export const WebhookEndpointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Webhook Endpoint.
         * @summary Create a Webhook Endpoint
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {WebhookEndpointCreateParams} WebhookEndpointCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhookEndpoint: async (tilled_account: string, WebhookEndpointCreateParams: WebhookEndpointCreateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('createWebhookEndpoint', 'tilled_account', tilled_account)
            // verify required parameter 'WebhookEndpointCreateParams' is not null or undefined
            assertParamExists('createWebhookEndpoint', 'WebhookEndpointCreateParams', WebhookEndpointCreateParams)
            const localVarPath = `/v1/webhook-endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(WebhookEndpointCreateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Webhook Endpoint. This cannot be undone.
         * @summary Delete a Webhook Endpoint
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookEndpoint: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('deleteWebhookEndpoint', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWebhookEndpoint', 'id', id)
            const localVarPath = `/v1/webhook-endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the details of an existing Webhook Endpoint.
         * @summary Get a Webhook Endpoint
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpoint: async (tilled_account: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('getWebhookEndpoint', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWebhookEndpoint', 'id', id)
            const localVarPath = `/v1/webhook-endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Webhook Endpoints. The Webhook Endpoints are sorted with the most recently created appearing first.
         * @summary List all Webhook Endpoints
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhookEndpoints: async (tilled_account: string, offset?: number, limit?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('listWebhookEndpoints', 'tilled_account', tilled_account)
            const localVarPath = `/v1/webhook-endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Webhook Endpoint by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update a Webhook Endpoint
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {WebhookEndpointUpdateParams} WebhookEndpointUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookEndpoint: async (tilled_account: string, id: string, WebhookEndpointUpdateParams: WebhookEndpointUpdateParams, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tilled_account' is not null or undefined
            assertParamExists('updateWebhookEndpoint', 'tilled_account', tilled_account)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWebhookEndpoint', 'id', id)
            // verify required parameter 'WebhookEndpointUpdateParams' is not null or undefined
            assertParamExists('updateWebhookEndpoint', 'WebhookEndpointUpdateParams', WebhookEndpointUpdateParams)
            const localVarPath = `/v1/webhook-endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            // authentication TilledApiKey required
            await setApiKeyToObject(localVarHeaderParameter, "tilled-api-key", configuration)

            if (tilled_account != null) {
                localVarHeaderParameter['tilled-account'] = String(tilled_account);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(WebhookEndpointUpdateParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhookEndpointsApi - functional programming interface
 * @export
 */
export const WebhookEndpointsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhookEndpointsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Webhook Endpoint.
         * @summary Create a Webhook Endpoint
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {WebhookEndpointCreateParams} WebhookEndpointCreateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWebhookEndpoint(tilled_account: string, WebhookEndpointCreateParams: WebhookEndpointCreateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookEndpoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWebhookEndpoint(tilled_account, WebhookEndpointCreateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a Webhook Endpoint. This cannot be undone.
         * @summary Delete a Webhook Endpoint
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhookEndpoint(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhookEndpoint(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the details of an existing Webhook Endpoint.
         * @summary Get a Webhook Endpoint
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhookEndpoint(tilled_account: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookEndpoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookEndpoint(tilled_account, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Webhook Endpoints. The Webhook Endpoints are sorted with the most recently created appearing first.
         * @summary List all Webhook Endpoints
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {number} [offset] The (zero-based) offset of the first item in the collection to return.
         * @param {number} [limit] The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWebhookEndpoints(tilled_account: string, offset?: number, limit?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListWebhookEndpoints200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listWebhookEndpoints(tilled_account, offset, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Webhook Endpoint by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update a Webhook Endpoint
         * @param {string} tilled_account The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
         * @param {string} id 
         * @param {WebhookEndpointUpdateParams} WebhookEndpointUpdateParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebhookEndpoint(tilled_account: string, id: string, WebhookEndpointUpdateParams: WebhookEndpointUpdateParams, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookEndpoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhookEndpoint(tilled_account, id, WebhookEndpointUpdateParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhookEndpointsApi - factory interface
 * @export
 */
export const WebhookEndpointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhookEndpointsApiFp(configuration)
    return {
        /**
         * Creates a Webhook Endpoint.
         * @summary Create a Webhook Endpoint
         * @param {WebhookEndpointsApiCreateWebhookEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWebhookEndpoint(requestParameters: WebhookEndpointsApiCreateWebhookEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookEndpoint> {
            return localVarFp.createWebhookEndpoint(requestParameters.tilled_account, requestParameters.WebhookEndpointCreateParams, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Webhook Endpoint. This cannot be undone.
         * @summary Delete a Webhook Endpoint
         * @param {WebhookEndpointsApiDeleteWebhookEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhookEndpoint(requestParameters: WebhookEndpointsApiDeleteWebhookEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteWebhookEndpoint(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the details of an existing Webhook Endpoint.
         * @summary Get a Webhook Endpoint
         * @param {WebhookEndpointsApiGetWebhookEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookEndpoint(requestParameters: WebhookEndpointsApiGetWebhookEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookEndpoint> {
            return localVarFp.getWebhookEndpoint(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Webhook Endpoints. The Webhook Endpoints are sorted with the most recently created appearing first.
         * @summary List all Webhook Endpoints
         * @param {WebhookEndpointsApiListWebhookEndpointsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWebhookEndpoints(requestParameters: WebhookEndpointsApiListWebhookEndpointsRequest, options?: AxiosRequestConfig): AxiosPromise<ListWebhookEndpoints200Response> {
            return localVarFp.listWebhookEndpoints(requestParameters.tilled_account, requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Webhook Endpoint by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
         * @summary Update a Webhook Endpoint
         * @param {WebhookEndpointsApiUpdateWebhookEndpointRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookEndpoint(requestParameters: WebhookEndpointsApiUpdateWebhookEndpointRequest, options?: AxiosRequestConfig): AxiosPromise<WebhookEndpoint> {
            return localVarFp.updateWebhookEndpoint(requestParameters.tilled_account, requestParameters.id, requestParameters.WebhookEndpointUpdateParams, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createWebhookEndpoint operation in WebhookEndpointsApi.
 * @export
 * @interface WebhookEndpointsApiCreateWebhookEndpointRequest
 */
export interface WebhookEndpointsApiCreateWebhookEndpointRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof WebhookEndpointsApiCreateWebhookEndpoint
     */
    readonly tilled_account: string

    /**
     * 
     * @type {WebhookEndpointCreateParams}
     * @memberof WebhookEndpointsApiCreateWebhookEndpoint
     */
    readonly WebhookEndpointCreateParams: WebhookEndpointCreateParams
}

/**
 * Request parameters for deleteWebhookEndpoint operation in WebhookEndpointsApi.
 * @export
 * @interface WebhookEndpointsApiDeleteWebhookEndpointRequest
 */
export interface WebhookEndpointsApiDeleteWebhookEndpointRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof WebhookEndpointsApiDeleteWebhookEndpoint
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof WebhookEndpointsApiDeleteWebhookEndpoint
     */
    readonly id: string
}

/**
 * Request parameters for getWebhookEndpoint operation in WebhookEndpointsApi.
 * @export
 * @interface WebhookEndpointsApiGetWebhookEndpointRequest
 */
export interface WebhookEndpointsApiGetWebhookEndpointRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof WebhookEndpointsApiGetWebhookEndpoint
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof WebhookEndpointsApiGetWebhookEndpoint
     */
    readonly id: string
}

/**
 * Request parameters for listWebhookEndpoints operation in WebhookEndpointsApi.
 * @export
 * @interface WebhookEndpointsApiListWebhookEndpointsRequest
 */
export interface WebhookEndpointsApiListWebhookEndpointsRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof WebhookEndpointsApiListWebhookEndpoints
     */
    readonly tilled_account: string

    /**
     * The (zero-based) offset of the first item in the collection to return.
     * @type {number}
     * @memberof WebhookEndpointsApiListWebhookEndpoints
     */
    readonly offset?: number

    /**
     * The maximum number of entries to return. If the value exceeds the maximum, then the maximum value will be used.
     * @type {number}
     * @memberof WebhookEndpointsApiListWebhookEndpoints
     */
    readonly limit?: number
}

/**
 * Request parameters for updateWebhookEndpoint operation in WebhookEndpointsApi.
 * @export
 * @interface WebhookEndpointsApiUpdateWebhookEndpointRequest
 */
export interface WebhookEndpointsApiUpdateWebhookEndpointRequest {
    /**
     * The id of the Tilled Account (usually starting with the prefix &#x60;acct_&#x60;) that the request is performed on behalf of.
     * @type {string}
     * @memberof WebhookEndpointsApiUpdateWebhookEndpoint
     */
    readonly tilled_account: string

    /**
     * 
     * @type {string}
     * @memberof WebhookEndpointsApiUpdateWebhookEndpoint
     */
    readonly id: string

    /**
     * 
     * @type {WebhookEndpointUpdateParams}
     * @memberof WebhookEndpointsApiUpdateWebhookEndpoint
     */
    readonly WebhookEndpointUpdateParams: WebhookEndpointUpdateParams
}

/**
 * WebhookEndpointsApi - object-oriented interface
 * @export
 * @class WebhookEndpointsApi
 * @extends {BaseAPI}
 */
export class WebhookEndpointsApi extends BaseAPI {
    /**
     * Creates a Webhook Endpoint.
     * @summary Create a Webhook Endpoint
     * @param {WebhookEndpointsApiCreateWebhookEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookEndpointsApi
     */
    public createWebhookEndpoint(requestParameters: WebhookEndpointsApiCreateWebhookEndpointRequest, options?: AxiosRequestConfig) {
        return WebhookEndpointsApiFp(this.configuration).createWebhookEndpoint(requestParameters.tilled_account, requestParameters.WebhookEndpointCreateParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Webhook Endpoint. This cannot be undone.
     * @summary Delete a Webhook Endpoint
     * @param {WebhookEndpointsApiDeleteWebhookEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookEndpointsApi
     */
    public deleteWebhookEndpoint(requestParameters: WebhookEndpointsApiDeleteWebhookEndpointRequest, options?: AxiosRequestConfig) {
        return WebhookEndpointsApiFp(this.configuration).deleteWebhookEndpoint(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the details of an existing Webhook Endpoint.
     * @summary Get a Webhook Endpoint
     * @param {WebhookEndpointsApiGetWebhookEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookEndpointsApi
     */
    public getWebhookEndpoint(requestParameters: WebhookEndpointsApiGetWebhookEndpointRequest, options?: AxiosRequestConfig) {
        return WebhookEndpointsApiFp(this.configuration).getWebhookEndpoint(requestParameters.tilled_account, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Webhook Endpoints. The Webhook Endpoints are sorted with the most recently created appearing first.
     * @summary List all Webhook Endpoints
     * @param {WebhookEndpointsApiListWebhookEndpointsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookEndpointsApi
     */
    public listWebhookEndpoints(requestParameters: WebhookEndpointsApiListWebhookEndpointsRequest, options?: AxiosRequestConfig) {
        return WebhookEndpointsApiFp(this.configuration).listWebhookEndpoints(requestParameters.tilled_account, requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Webhook Endpoint by setting the values of the provided parameters. Any parameters not provided will be left unchanged.
     * @summary Update a Webhook Endpoint
     * @param {WebhookEndpointsApiUpdateWebhookEndpointRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhookEndpointsApi
     */
    public updateWebhookEndpoint(requestParameters: WebhookEndpointsApiUpdateWebhookEndpointRequest, options?: AxiosRequestConfig) {
        return WebhookEndpointsApiFp(this.configuration).updateWebhookEndpoint(requestParameters.tilled_account, requestParameters.id, requestParameters.WebhookEndpointUpdateParams, options).then((request) => request(this.axios, this.basePath));
    }
}
