/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { AccountRole } from './account-role';
// May contain unused imports in some cases
// @ts-ignore
import { UserEmailSettings } from './user-email-settings';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * If this user is associated with multiple accounts then this value will be one of those accounts.
     * @type {string}
     * @memberof User
     * @deprecated
     */
    'account_id': string;
    /**
     * The user\'s role within a specific account.
     * @type {Array<AccountRole>}
     * @memberof User
     */
    'account_roles': Array<AccountRole>;
    /**
     * Time at which the object was created.
     * @type {string}
     * @memberof User
     */
    'created_at': string;
    /**
     * The user email.
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {UserEmailSettings}
     * @memberof User
     */
    'email_settings': UserEmailSettings;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * The full name of the user.
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * If this user is associated with multiple accounts then this value will be the role associated with the account_id property. The user\'s role, primarily used in the Tilled Dashboard. The roles have varied restrictions on the actions they can take.
     * @type {string}
     * @memberof User
     * @deprecated
     */
    'role': UserRole;
    /**
     * Time at which the object was last updated.
     * @type {string}
     * @memberof User
     */
    'updated_at': string;
    /**
     * Time at which the user last successfully logged in via the API.
     * @type {string}
     * @memberof User
     */
    'last_login_at'?: string;
    /**
     * Time at which the user\'s token was last used to authenticate a request to the API.
     * @type {string}
     * @memberof User
     */
    'last_request_at'?: string;
    /**
     * Six digit verification code of the user.
     * @type {string}
     * @memberof User
     */
    'verification_code'?: string;
}

export const UserRole = {
    OWNER: 'owner',
    ADMIN: 'admin',
    DEVELOPER: 'developer',
    ANALYST: 'analyst',
    VIEW_ONLY: 'view_only',
    MERCHANT_OWNER: 'merchant_owner',
    MERCHANT_ADMIN: 'merchant_admin'
} as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];


