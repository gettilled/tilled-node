/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { PayoutBalanceTransaction } from './payout-balance-transaction';

/**
 * 
 * @export
 * @interface Payout
 */
export interface Payout {
    /**
     * 
     * @type {string}
     * @memberof Payout
     */
    'account_id': string;
    /**
     * Amount to be transferred to your bank account, in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency).
     * @type {number}
     * @memberof Payout
     */
    'amount': number;
    /**
     * 
     * @type {PayoutBalanceTransaction}
     * @memberof Payout
     * @deprecated
     */
    'balance_transaction': PayoutBalanceTransaction;
    /**
     * Time at which the object was created.
     * @type {string}
     * @memberof Payout
     */
    'created_at': string;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
     * @type {string}
     * @memberof Payout
     */
    'currency': PayoutCurrency;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof Payout
     */
    'id': string;
    /**
     * Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it is submitted to the bank, when it becomes `in_transit`. The status then changes to `paid` if the transaction goes through, or to `failed` or `canceled` (within 5 business days). Some failed payouts may initially show as `paid` but then change to `failed`.
     * @type {string}
     * @memberof Payout
     */
    'status': PayoutStatus;
    /**
     * Time at which the object was last updated.
     * @type {string}
     * @memberof Payout
     */
    'updated_at': string;
    /**
     * An arbitrary string attached to the object. Often useful for displaying to users.
     * @type {string}
     * @memberof Payout
     */
    'description'?: string;
    /**
     * Error code explaining the reason for a payout failure, if available.
     * @type {string}
     * @memberof Payout
     */
    'failure_code'?: PayoutFailureCode;
    /**
     * The date the payout was paid.
     * @type {string}
     * @memberof Payout
     */
    'paid_at'?: string;
    /**
     * An optional property that is included when specified in a query parameter on request. It represents the number of balance_transaction objects associated with the payout (aside from the payout balance transaction itself).
     * @type {number}
     * @memberof Payout
     */
    'transaction_count'?: number;
}

export const PayoutCurrency = {
    AUD: 'aud',
    CAD: 'cad',
    DKK: 'dkk',
    EUR: 'eur',
    HKD: 'hkd',
    JPY: 'jpy',
    NZD: 'nzd',
    NOK: 'nok',
    GBP: 'gbp',
    ZAR: 'zar',
    SEK: 'sek',
    CHF: 'chf',
    USD: 'usd'
} as const;

export type PayoutCurrency = typeof PayoutCurrency[keyof typeof PayoutCurrency];
export const PayoutStatus = {
    CANCELED: 'canceled',
    FAILED: 'failed',
    IN_TRANSIT: 'in_transit',
    PAID: 'paid',
    PENDING: 'pending'
} as const;

export type PayoutStatus = typeof PayoutStatus[keyof typeof PayoutStatus];
export const PayoutFailureCode = {
    ACCOUNT_CLOSED: 'account_closed',
    ACCOUNT_FROZEN: 'account_frozen',
    BANK_ACCOUNT_RESTRICTED: 'bank_account_restricted',
    BANK_OWNERSHIP_CHANGED: 'bank_ownership_changed',
    COULD_NOT_PROCESS: 'could_not_process',
    DEBIT_NOT_AUTHORIZED: 'debit_not_authorized',
    DECLINED: 'declined',
    INVALID_ACCOUNT_NUMBER: 'invalid_account_number',
    INCORRECT_ACCOUNT_HOLDER_NAME: 'incorrect_account_holder_name',
    INCORRECT_ACCOUNT_HOLDER_ADDRESS: 'incorrect_account_holder_address',
    INCORRECT_ACCOUNT_HOLDER_TAX_ID: 'incorrect_account_holder_tax_id',
    INVALID_CURRENCY: 'invalid_currency',
    NO_ACCOUNT: 'no_account'
} as const;

export type PayoutFailureCode = typeof PayoutFailureCode[keyof typeof PayoutFailureCode];


