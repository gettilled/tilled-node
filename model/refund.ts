/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { PlatformFeeRefundBalanceTransaction } from './platform-fee-refund-balance-transaction';

/**
 * 
 * @export
 * @interface Refund
 */
export interface Refund {
    /**
     * Amount (in the smallest currency unit) refunded.
     * @type {number}
     * @memberof Refund
     */
    'amount': number;
    /**
     * 
     * @type {PlatformFeeRefundBalanceTransaction}
     * @memberof Refund
     * @deprecated
     */
    'balance_transaction': PlatformFeeRefundBalanceTransaction;
    /**
     * ID of the Charge that was refunded.
     * @type {string}
     * @memberof Refund
     */
    'charge_id': string;
    /**
     * Time at which the object was created.
     * @type {string}
     * @memberof Refund
     */
    'created_at': string;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof Refund
     */
    'id': string;
    /**
     * ID of the PaymentIntent that was refunded.
     * @type {string}
     * @memberof Refund
     */
    'payment_intent_id': string;
    /**
     * Status of the refund, one of `pending`, `succeeded`, `failed`, `canceled` or `requires_action`.
     * @type {string}
     * @memberof Refund
     */
    'status': RefundStatus;
    /**
     * Time at which the object was last updated.
     * @type {string}
     * @memberof Refund
     */
    'updated_at': string;
    /**
     * Error code explaining reason for refund failure.
     * @type {string}
     * @memberof Refund
     */
    'failure_code'?: RefundFailureCode;
    /**
     * Message to user further explaining the reason for the refund failure.
     * @type {string}
     * @memberof Refund
     */
    'failure_message'?: string;
    /**
     * Set of [key-value pairs](#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     * @type {{ [key: string]: string; }}
     * @memberof Refund
     */
    'metadata'?: { [key: string]: string; };
    /**
     * ID of the payment method that was refunded.
     * @type {string}
     * @memberof Refund
     */
    'payment_method_id'?: string;
    /**
     * Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated  by Tilled (`expired_uncaptured_charge`, `partial_capture`, or `reversal`)
     * @type {string}
     * @memberof Refund
     */
    'reason'?: RefundReason;
}

export const RefundStatus = {
    CANCELED: 'canceled',
    PENDING: 'pending',
    SUCCEEDED: 'succeeded',
    FAILED: 'failed',
    REQUIRES_ACTION: 'requires_action'
} as const;

export type RefundStatus = typeof RefundStatus[keyof typeof RefundStatus];
export const RefundFailureCode = {
    EXPIRED_OR_CANCELED_CARD: 'expired_or_canceled_card',
    LOST_OR_STOLEN_CARD: 'lost_or_stolen_card',
    FRAUDULENT: 'fraudulent',
    RISK_BLOCKED: 'risk_blocked',
    DECLINED: 'declined',
    PROPRIETARY_CARD_ACTIVITY_REGULATIONS: 'proprietary_card_activity_regulations',
    BLACKLISTED_CARD: 'blacklisted_card',
    NOT_PERMITTED: 'not_permitted',
    PROCESSING_ERROR: 'processing_error',
    DEVICE_IS_BUSY: 'device_is_busy'
} as const;

export type RefundFailureCode = typeof RefundFailureCode[keyof typeof RefundFailureCode];
export const RefundReason = {
    DUPLICATE: 'duplicate',
    FRAUDULENT: 'fraudulent',
    REQUESTED_BY_CUSTOMER: 'requested_by_customer',
    EXPIRED_UNCAPTURED_CHARGE: 'expired_uncaptured_charge',
    PARTIAL_CAPTURE: 'partial_capture',
    REVERSAL: 'reversal'
} as const;

export type RefundReason = typeof RefundReason[keyof typeof RefundReason];


