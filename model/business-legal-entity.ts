/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { BusinessLegalEntityAchBankAccount } from './business-legal-entity-ach-bank-account';
// May contain unused imports in some cases
// @ts-ignore
import { BusinessLegalEntityAddress } from './business-legal-entity-address';
// May contain unused imports in some cases
// @ts-ignore
import { BusinessLegalEntityBankAccount } from './business-legal-entity-bank-account';
// May contain unused imports in some cases
// @ts-ignore
import { Principal } from './principal';

/**
 * 
 * @export
 * @interface BusinessLegalEntity
 */
export interface BusinessLegalEntity {
    /**
     * 
     * @type {BusinessLegalEntityAddress}
     * @memberof BusinessLegalEntity
     */
    'address': BusinessLegalEntityAddress;
    /**
     * Average transaction amount, in minor units. (e.g. $100.00 = 10000 minor units)
     * @type {number}
     * @memberof BusinessLegalEntity
     */
    'average_transaction_amount': number;
    /**
     * Category code of the business. * `ACCT` = Accounting * `ART` = Artist Supply and Craft Stores * `BEAUTY` = Barber & Beauty Shop * `CATERING` = Catering * `CHARITY` = Charity * `CLEANING` = Cleaning Services * `CONSULTANT` = Consultant * `CONTRACTOR` = Trade Contractor * `DENTIST` = Dentistry * `EDU` = Schools & Education * `FOOD` = Food/Grocery * `LANDSCAPING` = Landscaping * `LEGAL` = Legal Services * `MEDICAL_PRACT` = Medical Practitioner * `MEDICAL_SERV` = Health Services * `MEMBERSHIP` = Membership Org. * `MISC_FOOD_STORES` = Misc. Food Stores * `MISC_MERCH` = Misc General Merchandise * `MISC_SERV` = Services * `MUSIC` = Music/Entertainment * `PC` = Computer Services * `PHOTO_FILM` = Photo/FILM * `PROF_SERV` = Professional Services * `REAL_ESTATE` = Real Estate * `RECREATION` = Recreation Services * `REPAIR` = Repair Services * `RESTO` = Restaurant/Bar * `RETAIL` = Direct Marketing Retail (MOTO) * `TAXI` = Taxi/Limo * `VET` = Veterinary * `WEB_DEV` = Web Design * `WEB_HOSTING` = Web Hosting
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'category': BusinessLegalEntityCategory;
    /**
     * Single currency used for processing and settlement for this merchant account.
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'currency': BusinessLegalEntityCurrency;
    /**
     * Registered business legal/trading name (e.g. \"ACME CA\")
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'legal_name': string;
    /**
     * The locale value used for the merchant account. Values depend on the region.
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'locale': BusinessLegalEntityLocale;
    /**
     * The merchant name
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'name': string;
    /**
     * Customer support phone number of the business. Cannot contain special characters.
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'phone': string;
    /**
     * Array of Principals (ie Business Owners).
     * @type {Array<Principal>}
     * @memberof BusinessLegalEntity
     */
    'principals': Array<Principal>;
    /**
     * Region for the merchant account
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'region': BusinessLegalEntityRegion;
    /**
     * Provides information about a payment that customers see on their statements. Concatenated with the prefix (shortened descriptor) or statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 20 characters for the concatenated descriptor.
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'statement_descriptor': string;
    /**
     * Company\'s Tax Identification Number
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'tax_identification_number': string;
    /**
     * Type of business. * `CHARITY` = Charity * `CIC` = Community Interest Company * `CORP` = Corporation * `LTD` = Limited * `LLC` = Limited Liability Company * `LLP` = Limited Liability Partnership * `NPCORP` = Non-Profit * `PARTNERSHIP` = Partnership * `PLC` = Public Limited Company * `GOV` = Public Sector/Governmental * `SOLEPROP` = Sole Proprietorship/Sole Trader * `TRUST` = Trust
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'type': BusinessLegalEntityType;
    /**
     * Estimated yearly processing volume of transactions of the business. * `LOW` = 0-50k * `MEDIUM` = 50-100k * `HIGH` = 100-250k * `VERY_HIGH` = 250k+
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'yearly_volume_range': BusinessLegalEntityYearlyVolumeRange;
    /**
     * 
     * @type {BusinessLegalEntityAchBankAccount}
     * @memberof BusinessLegalEntity
     * @deprecated
     */
    'ach_bank_account'?: BusinessLegalEntityAchBankAccount;
    /**
     * Estimated annual revenue of the business. * `LOW` = $0 - 100,000 * `MEDIUM` = $100,001 - 250,000 * `HIGH` = $250,001 - 400,000 * `VERY_HIGH` = $400,001 - 550,000 * `EXTREMELY_HIGH` = $550,000+
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'annual_revenue'?: BusinessLegalEntityAnnualRevenue;
    /**
     * Average transaction amount, in minor units for Card payments. (e.g. $100.00 = 10000 minor units)
     * @type {number}
     * @memberof BusinessLegalEntity
     */
    'average_transaction_amount_card'?: number;
    /**
     * Average transaction amount, in minor units for Direct Debit payments. (e.g. $100.00 = 10000 minor units)
     * @type {number}
     * @memberof BusinessLegalEntity
     */
    'average_transaction_amount_debit'?: number;
    /**
     * Average number of transactions per month
     * @type {number}
     * @memberof BusinessLegalEntity
     */
    'average_transactions_per_month'?: number;
    /**
     * 
     * @type {BusinessLegalEntityBankAccount}
     * @memberof BusinessLegalEntity
     */
    'bank_account'?: BusinessLegalEntityBankAccount;
    /**
     * Email of the business.
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'company_email'?: string;
    /**
     * 2-digit Country code (e.g. \'US\', \'CA\') [See ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'country_of_incorporation'?: string;
    /**
     * Company\'s business description
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'description'?: string;
    /**
     * Year the business was incorporated. A number in \'YYYY\' format.
     * @type {number}
     * @memberof BusinessLegalEntity
     */
    'incorporation_year'?: number;
    /**
     * Estimated monthly volume amount of the business, in minor units. (e.g. $100.00 = 10000 minor units)
     * @type {number}
     * @memberof BusinessLegalEntity
     */
    'monthly_volume_amount'?: number;
    /**
     * Website of the business.
     * @type {string}
     * @memberof BusinessLegalEntity
     */
    'website'?: string;
}

export const BusinessLegalEntityCategory = {
    ACCT: 'ACCT',
    ART: 'ART',
    BEAUTY: 'BEAUTY',
    CATERING: 'CATERING',
    CHARITY: 'CHARITY',
    CLEANING: 'CLEANING',
    CONSULTANT: 'CONSULTANT',
    CONTRACTOR: 'CONTRACTOR',
    DENTIST: 'DENTIST',
    EDU: 'EDU',
    FOOD: 'FOOD',
    LANDSCAPING: 'LANDSCAPING',
    LEGAL: 'LEGAL',
    MEDICAL_PRACT: 'MEDICAL_PRACT',
    MEDICAL_SERV: 'MEDICAL_SERV',
    MEMBERSHIP: 'MEMBERSHIP',
    MISC_FOOD_STORES: 'MISC_FOOD_STORES',
    MISC_MERCH: 'MISC_MERCH',
    MISC_SERV: 'MISC_SERV',
    MUSIC: 'MUSIC',
    PC: 'PC',
    PHOTO_FILM: 'PHOTO_FILM',
    PROF_SERV: 'PROF_SERV',
    REAL_ESTATE: 'REAL_ESTATE',
    RECREATION: 'RECREATION',
    REPAIR: 'REPAIR',
    RESTO: 'RESTO',
    RETAIL: 'RETAIL',
    TAXI: 'TAXI',
    UTILITY: 'UTILITY',
    VET: 'VET',
    WEB_DEV: 'WEB_DEV',
    WEB_HOSTING: 'WEB_HOSTING',
    OTHER: 'OTHER',
    QUICK_PAY_FAST_FOOD: 'QUICK_PAY_FAST_FOOD',
    PARKING: 'PARKING',
    CAR_WASH: 'CAR_WASH',
    ELEM_SECOND_SCHOOL: 'ELEM_SECOND_SCHOOL',
    COLLEGE_UNIV_SCHOOL: 'COLLEGE_UNIV_SCHOOL',
    CHILD_CARE: 'CHILD_CARE',
    RELIGIOUS_ORG: 'RELIGIOUS_ORG',
    VOCA_TRADE_SCHOOL: 'VOCA_TRADE_SCHOOL',
    AMBULANCE: 'AMBULANCE',
    DOCTOR: 'DOCTOR',
    OSTEOPATH: 'OSTEOPATH',
    CHIROPRACTOR: 'CHIROPRACTOR',
    EYE_DOCTOR: 'EYE_DOCTOR',
    OPTICAL: 'OPTICAL',
    PODIATRY: 'PODIATRY',
    GENERAL_CONTR: 'GENERAL_CONTR',
    HVAC_PLUMBING_CONTR: 'HVAC_PLUMBING_CONTR',
    ELEC_CONTR: 'ELEC_CONTR',
    MASON_CONTR: 'MASON_CONTR',
    CARPENTRY_CONTR: 'CARPENTRY_CONTR',
    ROOF_SIDING_METAL_CONTR: 'ROOF_SIDING_METAL_CONTR',
    CONCRETE_CONTR: 'CONCRETE_CONTR',
    TRUCKING_STORAGE: 'TRUCKING_STORAGE'
} as const;

export type BusinessLegalEntityCategory = typeof BusinessLegalEntityCategory[keyof typeof BusinessLegalEntityCategory];
export const BusinessLegalEntityCurrency = {
    AUD: 'aud',
    CAD: 'cad',
    DKK: 'dkk',
    EUR: 'eur',
    HKD: 'hkd',
    JPY: 'jpy',
    NZD: 'nzd',
    NOK: 'nok',
    GBP: 'gbp',
    ZAR: 'zar',
    SEK: 'sek',
    CHF: 'chf',
    USD: 'usd'
} as const;

export type BusinessLegalEntityCurrency = typeof BusinessLegalEntityCurrency[keyof typeof BusinessLegalEntityCurrency];
export const BusinessLegalEntityLocale = {
    EN_US: 'en_US',
    EN_CA: 'en_CA',
    FR_CA: 'fr_CA',
    EN_GB: 'en_GB'
} as const;

export type BusinessLegalEntityLocale = typeof BusinessLegalEntityLocale[keyof typeof BusinessLegalEntityLocale];
export const BusinessLegalEntityRegion = {
    US: 'US',
    CA: 'CA'
} as const;

export type BusinessLegalEntityRegion = typeof BusinessLegalEntityRegion[keyof typeof BusinessLegalEntityRegion];
export const BusinessLegalEntityType = {
    CHARITY: 'CHARITY',
    CIC: 'CIC',
    CORP: 'CORP',
    LTD: 'LTD',
    LLC: 'LLC',
    LLP: 'LLP',
    NPCORP: 'NPCORP',
    PARTNERSHIP: 'PARTNERSHIP',
    PLC: 'PLC',
    GOV: 'GOV',
    SOLEPROP: 'SOLEPROP',
    TRUST: 'TRUST'
} as const;

export type BusinessLegalEntityType = typeof BusinessLegalEntityType[keyof typeof BusinessLegalEntityType];
export const BusinessLegalEntityYearlyVolumeRange = {
    LOW: 'LOW',
    MEDIUM: 'MEDIUM',
    HIGH: 'HIGH',
    VERY_HIGH: 'VERY_HIGH'
} as const;

export type BusinessLegalEntityYearlyVolumeRange = typeof BusinessLegalEntityYearlyVolumeRange[keyof typeof BusinessLegalEntityYearlyVolumeRange];
export const BusinessLegalEntityAnnualRevenue = {
    LOW: 'LOW',
    MEDIUM: 'MEDIUM',
    HIGH: 'HIGH',
    VERY_HIGH: 'VERY_HIGH',
    EXTREMELY_HIGH: 'EXTREMELY_HIGH'
} as const;

export type BusinessLegalEntityAnnualRevenue = typeof BusinessLegalEntityAnnualRevenue[keyof typeof BusinessLegalEntityAnnualRevenue];


