/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { CardDetails } from './card-details';
// May contain unused imports in some cases
// @ts-ignore
import { PaymentMethodAchDebit } from './payment-method-ach-debit';
// May contain unused imports in some cases
// @ts-ignore
import { PaymentMethodBillingDetails } from './payment-method-billing-details';
// May contain unused imports in some cases
// @ts-ignore
import { PaymentMethodCard } from './payment-method-card';
// May contain unused imports in some cases
// @ts-ignore
import { PaymentMethodEftDebit } from './payment-method-eft-debit';
// May contain unused imports in some cases
// @ts-ignore
import { PaymentMethodTerminalReader } from './payment-method-terminal-reader';

/**
 * 
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
    /**
     * Indicates whether or not the payment method can be used to make a charge. When a payment method is created via Tilled.js, a payment method is only capable of being used once (i.e. single-use) unless it is attached to a customer, in which case it becomes reusable.
     * @type {boolean}
     * @memberof PaymentMethod
     */
    'chargeable': boolean;
    /**
     * Time at which the object was created.
     * @type {string}
     * @memberof PaymentMethod
     */
    'created_at': string;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof PaymentMethod
     */
    'id': string;
    /**
     * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
     * @type {string}
     * @memberof PaymentMethod
     */
    'type': PaymentMethodType;
    /**
     * Time at which the object was last updated.
     * @type {string}
     * @memberof PaymentMethod
     */
    'updated_at': string;
    /**
     * 
     * @type {PaymentMethodAchDebit}
     * @memberof PaymentMethod
     */
    'ach_debit'?: PaymentMethodAchDebit;
    /**
     * 
     * @type {PaymentMethodBillingDetails}
     * @memberof PaymentMethod
     */
    'billing_details'?: PaymentMethodBillingDetails;
    /**
     * 
     * @type {PaymentMethodCard}
     * @memberof PaymentMethod
     */
    'card'?: PaymentMethodCard;
    /**
     * 
     * @type {CardDetails}
     * @memberof PaymentMethod
     */
    'card_present'?: CardDetails;
    /**
     * The ID of the Customer to which this PaymentMethod is saved.
     * @type {string}
     * @memberof PaymentMethod
     */
    'customer_id'?: string;
    /**
     * 
     * @type {PaymentMethodEftDebit}
     * @memberof PaymentMethod
     */
    'eft_debit'?: PaymentMethodEftDebit;
    /**
     * The time at which this PaymentMethod expires and is no longer available. PaymentMethods are created using a token generated by Tilled.js representing the details of a payment method (e.g. card or bank details). This token is a single-use token with an expiration date. Use `/payment-methods/{id}/attach` to make this PaymentMethod reusable.
     * @type {string}
     * @memberof PaymentMethod
     */
    'expires_at'?: string;
    /**
     * Set of [key-value pairs](#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     * @type {{ [key: string]: string; }}
     * @memberof PaymentMethod
     */
    'metadata'?: { [key: string]: string; };
    /**
     * A customer provided name for the PaymentMethod.
     * @type {string}
     * @memberof PaymentMethod
     */
    'nick_name'?: string;
    /**
     * 
     * @type {PaymentMethodTerminalReader}
     * @memberof PaymentMethod
     */
    'terminal_reader'?: PaymentMethodTerminalReader;
}

export const PaymentMethodType = {
    CARD: 'card',
    ACH_DEBIT: 'ach_debit',
    EFT_DEBIT: 'eft_debit',
    CARD_PRESENT: 'card_present'
} as const;

export type PaymentMethodType = typeof PaymentMethodType[keyof typeof PaymentMethodType];


