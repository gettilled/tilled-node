/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { AccountCapabilityPricingTemplate } from './account-capability-pricing-template';
// May contain unused imports in some cases
// @ts-ignore
import { AccountCapabilityProductCode } from './account-capability-product-code';
// May contain unused imports in some cases
// @ts-ignore
import { AccountRequirementsError } from './account-requirements-error';

/**
 * 
 * @export
 * @interface AccountCapability
 */
export interface AccountCapability {
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof AccountCapability
     */
    'id': string;
    /**
     * The percentage of required fields completed in the onboarding application.
     * @type {number}
     * @memberof AccountCapability
     */
    'onboarding_application_progress': number;
    /**
     * 
     * @type {AccountCapabilityPricingTemplate}
     * @memberof AccountCapability
     */
    'pricing_template': AccountCapabilityPricingTemplate;
    /**
     * 
     * @type {AccountCapabilityProductCode}
     * @memberof AccountCapability
     * @deprecated
     */
    'product_code': AccountCapabilityProductCode;
    /**
     * The fields that need to be collected again because validation failed for some reason.
     * @type {Array<AccountRequirementsError>}
     * @memberof AccountCapability
     */
    'requirements_errors': Array<AccountRequirementsError>;
    /**
     * Status of the associated product code as part of the onboarding process. Only the `active` status represents that payments can be handled by this account for this given product code.  `created` The capability has been created but no further action taken. Generally, this is the state of all capabilities when a merchant has been created but the onboarding process has not yet started.  `started` The onboarding process has been started but not yet submitted.  `submitted` The onboarding process for this product code has been submitted.  `active` This associated product code is active for payments on this account.  `disabled` This associated product code is not valid for payments on this account.
     * @type {string}
     * @memberof AccountCapability
     */
    'status': AccountCapabilityStatus;
    /**
     * The URL for the merchant\'s onboarding application.
     * @type {string}
     * @memberof AccountCapability
     */
    'onboarding_application_url'?: string;
}

export const AccountCapabilityStatus = {
    CREATED: 'created',
    STARTED: 'started',
    SUBMITTED: 'submitted',
    ACTIVE: 'active',
    DISABLED: 'disabled',
    IN_REVIEW: 'in_review',
    REJECTED: 'rejected',
    WITHDRAWN: 'withdrawn'
} as const;

export type AccountCapabilityStatus = typeof AccountCapabilityStatus[keyof typeof AccountCapabilityStatus];


