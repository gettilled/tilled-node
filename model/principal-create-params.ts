/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { OnboardingAddress } from './onboarding-address';

/**
 * 
 * @export
 * @interface PrincipalCreateParams
 */
export interface PrincipalCreateParams {
    /**
     * Registered *residential* address for this person
     * @type {OnboardingAddress}
     * @memberof PrincipalCreateParams
     */
    'address': OnboardingAddress;
    /**
     * This person\'s date of birth. Format must be ISO8601 (e.g. \'2000-01-25\'; format \'YYYY-MM-DD\'). Currently the person must be older than 18 years of age.
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'date_of_birth': string;
    /**
     * This person\'s email address
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'email': string;
    /**
     * First name of the principal.
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'first_name': string;
    /**
     * Indicates whether this person is the applicant for the merchant account. For US merchant accounts (`region = US`) it is required that _exactly_ one of the principals is specified as the applicant.
     * @type {boolean}
     * @memberof PrincipalCreateParams
     */
    'is_applicant': boolean;
    /**
     * Job title of the person
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'job_title': PrincipalCreateParamsJobTitle;
    /**
     * This person\'s last name.
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'last_name': string;
    /**
     * Percentage of ownership of the company.
     * @type {number}
     * @memberof PrincipalCreateParams
     */
    'percent_ownership': number;
    /**
     * This person\'s phone number
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'phone': string;
    /**
     * The unique identifier for this principal. It is not required upon initial submission. The `id_number` property is redacted in any responses, so if the principal needs to be updated then provide this identifier that was generated during the initial request.
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'id'?: string;
    /**
     * Social Security Number (US) or Social Insurance Number (CA). Optional when business structure is `government`. Expected format: 9-digit string of numbers (e.g. \"111444777\"). Optional in CA.
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'id_number'?: string;
    /**
     * This indicates whether the person is the Control Prong. Control Prong is an individual with significant responsibility for managing the legal entity customer (e.g., a CEO, CFO, COO, Managing Member, General Partner, President, Vice-President, or Treasurer). For US merchant accounts (`region = US`) it is required that _exactly_ one of the principals is specified as the Control Prong.
     * @type {boolean}
     * @memberof PrincipalCreateParams
     */
    'is_control_prong'?: boolean;
    /**
     * This person\'s middle name
     * @type {string}
     * @memberof PrincipalCreateParams
     */
    'middle_name'?: string;
    /**
     * Previous registered *residential* address for this principal. Require for Canadian principals and have lived at their current address for fewer than 3 years.
     * @type {OnboardingAddress}
     * @memberof PrincipalCreateParams
     */
    'previous_address'?: OnboardingAddress;
    /**
     * Years at given address. Required for CA merchant accounts (`region = CA`).
     * @type {number}
     * @memberof PrincipalCreateParams
     */
    'years_at_address'?: number;
    /**
     * Years at given previous address. Required for CA merchant accounts (`region = CA`).
     * @type {number}
     * @memberof PrincipalCreateParams
     */
    'years_at_previous_address'?: number;
}

export const PrincipalCreateParamsJobTitle = {
    CHIEF_EXECUTIVE_OFFICER: 'chief_executive_officer',
    CO_OWNER: 'co_owner',
    CONTROLLER: 'controller',
    DIRECTOR: 'director',
    FINANCIAL_OFFICER: 'financial_officer',
    GENERAL_MANAGER: 'general_manager',
    GENERAL_PARTNER: 'general_partner',
    LIMITED_PARTNER: 'limited_partner',
    MANAGER: 'manager',
    MEMBER: 'member',
    OWNER: 'owner',
    PRESIDENT: 'president',
    SECRETARY: 'secretary',
    TREASURER: 'treasurer',
    SENIOR_VICE_PRESIDENT: 'senior_vice_president',
    VICE_PRESIDENT: 'vice_president'
} as const;

export type PrincipalCreateParamsJobTitle = typeof PrincipalCreateParamsJobTitle[keyof typeof PrincipalCreateParamsJobTitle];


