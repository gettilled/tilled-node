/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface SubscriptionCreateParams
 */
export interface SubscriptionCreateParams {
    /**
     * Determines the date of the first payment and the day of week/month/year for subsequent payments. If a month doesn\'t have the anchor day, the subscription will be billed on the last day of the month. For example, a monthly subscription starting on January 31 bills on Feb 28/29, then March 31, April 30, etc. Format must be ISO8601 (e.g. \'2000-01-25\', \'2024-02-01T04:00:00-0500\', \'2018-04-04T16:00:00.000Z\'). UTC is assumed unless a timezone offset is supplied. The subscription will be billed close to (typically within 30 minutes) the time portion of this date-time field. Note: if no time portion was specified during the creation of the subscription (i.e. \'2022-04-01\') then the time is defaulted to midnight UTC (00:00:00) and the subscription will be billed around 7PM Eastern on the *previous* day.
     * @type {string}
     * @memberof SubscriptionCreateParams
     */
    'billing_cycle_anchor': string;
    /**
     * Three-letter ISO currency code, in lowercase.
     * @type {string}
     * @memberof SubscriptionCreateParams
     */
    'currency': SubscriptionCreateParamsCurrency;
    /**
     * The id of the customer who owns the subscription.
     * @type {string}
     * @memberof SubscriptionCreateParams
     */
    'customer_id': string;
    /**
     * The frequency at which a subscription is billed. One of `week`, `month` or `year`.
     * @type {string}
     * @memberof SubscriptionCreateParams
     */
    'interval_unit': SubscriptionCreateParamsIntervalUnit;
    /**
     * The id of the PaymentMethod used for this subscription. It must belong to the customer associated with the subscription.
     * @type {string}
     * @memberof SubscriptionCreateParams
     */
    'payment_method_id': string;
    /**
     * Amount intended to be collected by this subscription. A positive integer representing how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency).
     * @type {number}
     * @memberof SubscriptionCreateParams
     */
    'price': number;
    /**
     * A date in the future at which the subscription will automatically get canceled.
     * @type {string}
     * @memberof SubscriptionCreateParams
     */
    'cancel_at'?: string;
    /**
     * The number of intervals (specified in the `interval_unit` attribute) between subscription billings. For example, `interval_unit=month` and `interval_count=3` bills every 3 months.
     * @type {number}
     * @memberof SubscriptionCreateParams
     */
    'interval_count'?: number;
    /**
     * Set of [key-value pairs](#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value (i.e. `\'\'` or `null`) to them. All keys can be unset by posting an empty value (i.e. `{}` or `null`) to `metadata`.
     * @type {{ [key: string]: string; }}
     * @memberof SubscriptionCreateParams
     */
    'metadata'?: { [key: string]: string; };
    /**
     * The amount of the fee (if any) that will be requested to be applied to the payment and transferred to the `partner` account. The amount of the fee collected will be capped a the total payment amount.
     * @type {number}
     * @memberof SubscriptionCreateParams
     */
    'platform_fee_amount'?: number;
}

export const SubscriptionCreateParamsCurrency = {
    AUD: 'aud',
    CAD: 'cad',
    DKK: 'dkk',
    EUR: 'eur',
    HKD: 'hkd',
    JPY: 'jpy',
    NZD: 'nzd',
    NOK: 'nok',
    GBP: 'gbp',
    ZAR: 'zar',
    SEK: 'sek',
    CHF: 'chf',
    USD: 'usd'
} as const;

export type SubscriptionCreateParamsCurrency = typeof SubscriptionCreateParamsCurrency[keyof typeof SubscriptionCreateParamsCurrency];
export const SubscriptionCreateParamsIntervalUnit = {
    WEEK: 'week',
    MONTH: 'month',
    YEAR: 'year'
} as const;

export type SubscriptionCreateParamsIntervalUnit = typeof SubscriptionCreateParamsIntervalUnit[keyof typeof SubscriptionCreateParamsIntervalUnit];


