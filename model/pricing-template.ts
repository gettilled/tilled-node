/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { PricingTemplateAchDebit } from './pricing-template-ach-debit';
// May contain unused imports in some cases
// @ts-ignore
import { PricingTemplateCard } from './pricing-template-card';
// May contain unused imports in some cases
// @ts-ignore
import { PricingTemplateCardPresent } from './pricing-template-card-present';
// May contain unused imports in some cases
// @ts-ignore
import { PricingTemplateEftDebit } from './pricing-template-eft-debit';

/**
 * 
 * @export
 * @interface PricingTemplate
 */
export interface PricingTemplate {
    /**
     * The ID of the Account associated with this pricing template.
     * @type {string}
     * @memberof PricingTemplate
     */
    'account_id': string;
    /**
     * The account monthly fee configured for this pricing template, in currency minor units.
     * @type {number}
     * @memberof PricingTemplate
     */
    'account_monthly_fee': number;
    /**
     * The account monthly minimum fee configured for this pricing template, in currency minor units.
     * @type {number}
     * @memberof PricingTemplate
     */
    'account_monthly_minimum_fee': number;
    /**
     * Time at which the object was created.
     * @type {string}
     * @memberof PricingTemplate
     */
    'created_at': string;
    /**
     * The currency this pricing template applies to.
     * @type {string}
     * @memberof PricingTemplate
     */
    'currency': PricingTemplateCurrency;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof PricingTemplate
     */
    'id': string;
    /**
     * The name of this pricing template.
     * @type {string}
     * @memberof PricingTemplate
     */
    'name': string;
    /**
     * The payment method type this pricing template applies to.
     * @type {string}
     * @memberof PricingTemplate
     */
    'payment_method_type': PricingTemplatePaymentMethodType;
    /**
     * The status of this pricing template
     * @type {string}
     * @memberof PricingTemplate
     */
    'status': PricingTemplateStatus;
    /**
     * Time at which the object was last updated.
     * @type {string}
     * @memberof PricingTemplate
     */
    'updated_at': string;
    /**
     * 
     * @type {PricingTemplateAchDebit}
     * @memberof PricingTemplate
     */
    'ach_debit'?: PricingTemplateAchDebit;
    /**
     * 
     * @type {PricingTemplateCard}
     * @memberof PricingTemplate
     */
    'card'?: PricingTemplateCard;
    /**
     * 
     * @type {PricingTemplateCardPresent}
     * @memberof PricingTemplate
     */
    'card_present'?: PricingTemplateCardPresent;
    /**
     * 
     * @type {PricingTemplateEftDebit}
     * @memberof PricingTemplate
     */
    'eft_debit'?: PricingTemplateEftDebit;
}

export const PricingTemplateCurrency = {
    AUD: 'aud',
    CAD: 'cad',
    DKK: 'dkk',
    EUR: 'eur',
    HKD: 'hkd',
    JPY: 'jpy',
    NZD: 'nzd',
    NOK: 'nok',
    GBP: 'gbp',
    ZAR: 'zar',
    SEK: 'sek',
    CHF: 'chf',
    USD: 'usd'
} as const;

export type PricingTemplateCurrency = typeof PricingTemplateCurrency[keyof typeof PricingTemplateCurrency];
export const PricingTemplatePaymentMethodType = {
    CARD: 'card',
    ACH_DEBIT: 'ach_debit',
    CARD_PRESENT: 'card_present',
    EFT_DEBIT: 'eft_debit'
} as const;

export type PricingTemplatePaymentMethodType = typeof PricingTemplatePaymentMethodType[keyof typeof PricingTemplatePaymentMethodType];
export const PricingTemplateStatus = {
    ACTIVE: 'active',
    ARCHIVED: 'archived',
    PENDING: 'pending'
} as const;

export type PricingTemplateStatus = typeof PricingTemplateStatus[keyof typeof PricingTemplateStatus];


