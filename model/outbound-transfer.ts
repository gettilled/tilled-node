/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface OutboundTransfer
 */
export interface OutboundTransfer {
    /**
     * The ID of the account for this outbound transfer.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'account_id': string;
    /**
     * Amount of the outbound transfer, in currency minor units.
     * @type {number}
     * @memberof OutboundTransfer
     */
    'amount': number;
    /**
     * Time at which the object was created.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'created_at': string;
    /**
     * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'currency': OutboundTransferCurrency;
    /**
     * The ID of destination [payment method](#tag/PaymentMethods) to send the outbound transfer to.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'destination_payment_method_id': string;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'id': string;
    /**
     * The status of the outbound transfer.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'status': OutboundTransferStatus;
    /**
     * Time at which the object was last updated.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'updated_at': string;
    /**
     * Populated when `status` is `canceled`, this is the time at which the Outbound Transfer was canceled.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'canceled_at'?: string;
    /**
     * Error code explaining reason for outbound transfer failure.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'failure_code'?: OutboundTransferFailureCode;
    /**
     * Message to user further explaining the reason for the outbound transfer failure.
     * @type {string}
     * @memberof OutboundTransfer
     */
    'failure_message'?: string;
    /**
     * Set of [key-value pairs](#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value (i.e. `\'\'` or `null`) to them. All keys can be unset by posting an empty value (i.e. `{}` or `null`) to `metadata`.
     * @type {{ [key: string]: string; }}
     * @memberof OutboundTransfer
     */
    'metadata'?: { [key: string]: string; };
}

export const OutboundTransferCurrency = {
    AUD: 'aud',
    CAD: 'cad',
    DKK: 'dkk',
    EUR: 'eur',
    HKD: 'hkd',
    JPY: 'jpy',
    NZD: 'nzd',
    NOK: 'nok',
    GBP: 'gbp',
    ZAR: 'zar',
    SEK: 'sek',
    CHF: 'chf',
    USD: 'usd'
} as const;

export type OutboundTransferCurrency = typeof OutboundTransferCurrency[keyof typeof OutboundTransferCurrency];
export const OutboundTransferStatus = {
    CANCELED: 'canceled',
    FAILED: 'failed',
    PENDING: 'pending',
    SUCCEEDED: 'succeeded'
} as const;

export type OutboundTransferStatus = typeof OutboundTransferStatus[keyof typeof OutboundTransferStatus];
export const OutboundTransferFailureCode = {
    ACCOUNT_CLOSED: 'account_closed',
    ACCOUNT_FROZEN: 'account_frozen',
    ACCOUNT_NUMBER_INVALID: 'account_number_invalid',
    AUTHORIZATION_REVOKED: 'authorization_revoked',
    BANK_ACCOUNT_BLOCKED: 'bank_account_blocked',
    FRAUDULENT: 'fraudulent',
    INSUFFICIENT_FUNDS: 'insufficient_funds',
    INVALID_FIELD: 'invalid_field',
    LIMIT_EXCEEDED: 'limit_exceeded',
    NO_ACCOUNT: 'no_account',
    NOT_AUTHORIZED: 'not_authorized',
    NOT_PERMITTED: 'not_permitted',
    PROCESSING_ERROR: 'processing_error',
    NOT_RECOGNIZED: 'not_recognized',
    RISK_BLOCKED: 'risk_blocked',
    STOP_PAYMENT: 'stop_payment'
} as const;

export type OutboundTransferFailureCode = typeof OutboundTransferFailureCode[keyof typeof OutboundTransferFailureCode];


