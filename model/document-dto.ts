/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



/**
 * 
 * @export
 * @interface DocumentDto
 */
export interface DocumentDto {
    /**
     * The ID of the account owning the document.
     * @type {string}
     * @memberof DocumentDto
     */
    'account_id': string;
    /**
     * Time at which the object was created.
     * @type {string}
     * @memberof DocumentDto
     */
    'created_at': string;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof DocumentDto
     */
    'id': string;
    /**
     * The status of the document
     * @type {string}
     * @memberof DocumentDto
     */
    'status': DocumentDtoStatus;
    /**
     * Time at which the object was submitted.
     * @type {string}
     * @memberof DocumentDto
     */
    'submitted_at': string;
    /**
     * The subtype of the document
     * @type {string}
     * @memberof DocumentDto
     */
    'subtype': DocumentDtoSubtype;
    /**
     * The type of the document
     * @type {string}
     * @memberof DocumentDto
     */
    'type': DocumentDtoType;
    /**
     * Time at which the object was last updated.
     * @type {string}
     * @memberof DocumentDto
     */
    'updated_at': string;
    /**
     * The file ID of an uploaded [File](#tag/Files) for the document, of type `onboarding_documentation`
     * @type {string}
     * @memberof DocumentDto
     * @deprecated
     */
    'file_id'?: string;
    /**
     * The list of file IDs of uploaded [File(s)](#tag/Files) for the document, of type `onboarding_documentation`
     * @type {Array<string>}
     * @memberof DocumentDto
     */
    'file_ids'?: Array<string>;
    /**
     * Set of [key-value pairs](#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value (i.e. `\'\'` or `null`) to them. All keys can be unset by posting an empty value (i.e. `{}` or `null`) to `metadata`.
     * @type {{ [key: string]: string; }}
     * @memberof DocumentDto
     */
    'metadata'?: { [key: string]: string; };
    /**
     * The reason for rejection of the document, if applicable
     * @type {string}
     * @memberof DocumentDto
     */
    'rejected_reason'?: DocumentDtoRejectedReason;
    /**
     * Additional notes for the request of a document, offering extra context
     * @type {string}
     * @memberof DocumentDto
     */
    'request_notes'?: string;
    /**
     * Written response to a document that has been requested, alternative to a [File](#tag/Files)
     * @type {string}
     * @memberof DocumentDto
     */
    'written_response'?: string;
}

export const DocumentDtoStatus = {
    REQUESTED: 'requested',
    SUBMITTED: 'submitted',
    REJECTED: 'rejected',
    VERIFIED: 'verified'
} as const;

export type DocumentDtoStatus = typeof DocumentDtoStatus[keyof typeof DocumentDtoStatus];
export const DocumentDtoSubtype = {
    BANK_LETTER_VOIDED_CHECK: 'bank_letter_voided_check',
    EIN_LETTER: 'ein_letter',
    ARTICLES_OF_INCORP: 'articles_of_incorp',
    BUSINESS_LICENSE: 'business_license',
    UTILITY_BILL: 'utility_bill',
    PROCESSING_STATEMENT: 'processing_statement',
    FINANCIAL_STATEMENT: 'financial_statement',
    _501C3: '501c3',
    TAX_RETURN: 'tax_return',
    INVOICE: 'invoice',
    DL_PASSPORT: 'dl_passport',
    DL_BACK: 'dl_back',
    BANK_STATEMENT: 'bank_statement',
    SIGNED_MERCHANT_AGREEMENT: 'signed_merchant_agreement',
    BUSINESS_MODEL: 'business_model',
    PRICING_MODEL: 'pricing_model',
    WEBSITE: 'website',
    SHOPPING_CART: 'shopping_cart',
    OTHER: 'other'
} as const;

export type DocumentDtoSubtype = typeof DocumentDtoSubtype[keyof typeof DocumentDtoSubtype];
export const DocumentDtoType = {
    FILE: 'file',
    WRITTEN: 'written'
} as const;

export type DocumentDtoType = typeof DocumentDtoType[keyof typeof DocumentDtoType];
export const DocumentDtoRejectedReason = {
    BLURRY: 'blurry',
    CORRUPT: 'corrupt',
    INVALID: 'invalid',
    SCANNED: 'scanned',
    INCOMPLETE: 'incomplete',
    DAMAGED: 'damaged',
    NOT_NEEDED: 'not_needed'
} as const;

export type DocumentDtoRejectedReason = typeof DocumentDtoRejectedReason[keyof typeof DocumentDtoRejectedReason];


