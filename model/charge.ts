/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { ChargeBalanceTransaction } from './charge-balance-transaction';
// May contain unused imports in some cases
// @ts-ignore
import { ChargePlatformFee } from './charge-platform-fee';
// May contain unused imports in some cases
// @ts-ignore
import { Refund } from './refund';

/**
 * 
 * @export
 * @interface Charge
 */
export interface Charge {
    /**
     * Amount (in the smallest currency unit) captured. Can be less than the `amount` on the PaymentIntent if a partial capture was made.
     * @type {number}
     * @memberof Charge
     */
    'amount_captured': number;
    /**
     * Amount (in the smallest currency unit) refunded. Can be less than the `amount` on the PaymentIntent if a partial refund was made.
     * @type {number}
     * @memberof Charge
     */
    'amount_refunded': number;
    /**
     * If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
     * @type {boolean}
     * @memberof Charge
     */
    'captured': boolean;
    /**
     * Time at which the object was created.
     * @type {string}
     * @memberof Charge
     */
    'created_at': string;
    /**
     * Unique identifier for the object.
     * @type {string}
     * @memberof Charge
     */
    'id': string;
    /**
     * The ID of the PaymentIntent associated with this charge.
     * @type {string}
     * @memberof Charge
     */
    'payment_intent_id': string;
    /**
     * The id of the PaymentMethod at the time of the transaction.
     * @type {string}
     * @memberof Charge
     */
    'payment_method_id': string;
    /**
     * Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will be false.
     * @type {boolean}
     * @memberof Charge
     */
    'refunded': boolean;
    /**
     * A list of refunds that have been applied to the charge.
     * @type {Array<Refund>}
     * @memberof Charge
     */
    'refunds': Array<Refund>;
    /**
     * The status of the payment.
     * @type {string}
     * @memberof Charge
     */
    'status': ChargeStatus;
    /**
     * Time at which the object was updated.
     * @type {string}
     * @memberof Charge
     */
    'updated_at': string;
    /**
     * 
     * @type {ChargeBalanceTransaction}
     * @memberof Charge
     * @deprecated
     */
    'balance_transaction'?: ChargeBalanceTransaction;
    /**
     * Time at which the charge was captured.
     * @type {string}
     * @memberof Charge
     */
    'captured_at'?: string;
    /**
     * Time at which the charge failed.
     * @type {string}
     * @memberof Charge
     */
    'failed_at'?: string;
    /**
     * Error code explaining reason for charge failure.
     * @type {string}
     * @memberof Charge
     */
    'failure_code'?: ChargeFailureCode;
    /**
     * Message to user further explaining the reason for the charge failure.
     * @type {string}
     * @memberof Charge
     */
    'failure_message'?: string;
    /**
     * 
     * @type {ChargePlatformFee}
     * @memberof Charge
     */
    'platform_fee'?: ChargePlatformFee;
}

export const ChargeStatus = {
    SUCCEEDED: 'succeeded',
    PENDING: 'pending',
    FAILED: 'failed'
} as const;

export type ChargeStatus = typeof ChargeStatus[keyof typeof ChargeStatus];
export const ChargeFailureCode = {
    ACCOUNT_CLOSED: 'account_closed',
    ACCOUNT_FROZEN: 'account_frozen',
    ACCOUNT_NUMBER_INVALID: 'account_number_invalid',
    AUTHORIZATION_REVOKED: 'authorization_revoked',
    AVS_CHECK_FAILED: 'avs_check_failed',
    BANK_ACCOUNT_BLOCKED: 'bank_account_blocked',
    CALL_ISSUER: 'call_issuer',
    CARD_NOT_SUPPORTED: 'card_not_supported',
    EXPIRED_CARD: 'expired_card',
    FRAUDULENT: 'fraudulent',
    GENERIC_DECLINE: 'generic_decline',
    INCORRECT_CVC: 'incorrect_cvc',
    INSUFFICIENT_FUNDS: 'insufficient_funds',
    INVALID_EXPIRY: 'invalid_expiry',
    INVALID_FIELD: 'invalid_field',
    INVALID_NUMBER: 'invalid_number',
    LIMIT_EXCEEDED: 'limit_exceeded',
    NO_ACCOUNT: 'no_account',
    NOT_AUTHORIZED: 'not_authorized',
    NOT_PERMITTED: 'not_permitted',
    PROCESSING_ERROR: 'processing_error',
    NOT_RECOGNIZED: 'not_recognized',
    PICKUP_CARD: 'pickup_card',
    RESTRICTED_CARD: 'restricted_card',
    RISK_BLOCKED: 'risk_blocked',
    SERVICE_NOT_ALLOWED: 'service_not_allowed',
    STOP_PAYMENT: 'stop_payment',
    TRY_AGAIN_LATER: 'try_again_later',
    INTERNAL_ERROR: 'internal_error',
    NO_ACTION_TAKEN: 'no_action_taken',
    CARD_REMOVED: 'card_removed',
    CANCELED: 'canceled',
    DEVICE_IS_BUSY: 'device_is_busy'
} as const;

export type ChargeFailureCode = typeof ChargeFailureCode[keyof typeof ChargeFailureCode];


