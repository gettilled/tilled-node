/* tslint:disable */
/* eslint-disable */
/**
 * Tilled API
 * The Tilled API is organized around [REST](http://en.wikipedia.org/wiki/Representational_State_Transfer). Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.  Tilled’s API has two public environments, `sandbox` and `production`. The former does not affect live data or interact with banking networks. Prior to certification completion, only `sandbox` is available.  Authentication uses a standard web token schema.  **Notice**: Tilled’s API uses HTTP status `401` for `Unauthenticated` (not `Unauthorized`). Requests for unauthorized materials will receive a `403: Forbidden` response. [Learn more about error codes >](https://docs.tilled.com/docs/resources/error-codes)  ## Authentication  Tilled’s API uses API keys for authentication, which can be managed in the Tilled Dashboard. Keys created in the sandbox environment will not work in production nor will production credentials work in the sandbox.  Restricted API keys can provide granular permissions.  Keep your API keys secure and do not share them publicly, such as on GitHub or in client-side code. Authentication is done via the custom HTTP header `tilled-api-key`, with your API key as the value. All requests must be over HTTPS; HTTP requests will fail, as will unauthenticated requests.  ## JWT  Create a JSON Web Token (JWT) using our [Login endpoint](https://docs.tilled.com/api-reference#tag/users/post/v1/auth/login). Use the format: Bearer <JWT>. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: integrations@tilled.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import { CheckoutSessionCreateParamsPaymentIntentData } from './checkout-session-create-params-payment-intent-data';
// May contain unused imports in some cases
// @ts-ignore
import { CheckoutSessionLineItem } from './checkout-session-line-item';

/**
 * 
 * @export
 * @interface CheckoutSessionCreateParams
 */
export interface CheckoutSessionCreateParams {
    /**
     * A list of items the customer is purchasing. The maximum is 100 line items, however it is recommended to consolidate line items if there are more than a few dozen.
     * @type {Array<CheckoutSessionLineItem>}
     * @memberof CheckoutSessionCreateParams
     */
    'line_items': Array<CheckoutSessionLineItem>;
    /**
     * 
     * @type {CheckoutSessionCreateParamsPaymentIntentData}
     * @memberof CheckoutSessionCreateParams
     */
    'payment_intent_data': CheckoutSessionCreateParamsPaymentIntentData;
    /**
     * If set, checkout will display a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.
     * @type {string}
     * @memberof CheckoutSessionCreateParams
     */
    'cancel_url'?: string;
    /**
     * If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address. Use this parameter to prefill customer data if you already have an email on file. To access information about the customer once a session is complete, use the customer_id field to fetch the customer.
     * @type {string}
     * @memberof CheckoutSessionCreateParams
     */
    'customer_email'?: string;
    /**
     * The ID of the customer for this checkout session.
     * @type {string}
     * @memberof CheckoutSessionCreateParams
     */
    'customer_id'?: string;
    /**
     * The due date for the checkout session. After this date the customer will no longer be able to complete the checkout session.
     * @type {string}
     * @memberof CheckoutSessionCreateParams
     */
    'expires_at'?: string;
    /**
     * Set of [key-value pairs](#section/Metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value (i.e. `\'\'` or `null`) to them. All keys can be unset by posting an empty value (i.e. `{}` or `null`) to `metadata`.
     * @type {{ [key: string]: string; }}
     * @memberof CheckoutSessionCreateParams
     */
    'metadata'?: { [key: string]: string; };
    /**
     * The URL to which we should send customers when payment is complete. It is recommended that you supply this value, but if none is provided, a generic success landing page will be used.
     * @type {string}
     * @memberof CheckoutSessionCreateParams
     */
    'success_url'?: string;
}

